Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Money dialog variables
DB_FirstGoal_MoneyDialogVar(1,"GEN_CheckMagicPocketGold_6057ad05-9492-4630-9f0a-be548b134c54");
DB_FirstGoal_MoneyDialogVar(2,"GEN_CheckMagicPocketGold_2_463b0f43-5410-412d-aba3-875cf81c38ca");
DB_FirstGoal_MoneyDialogVar(3,"GEN_CheckMagicPocketGold_3_01f129ea-b4dc-44b6-8154-9a948f876a82");
DB_FirstGoal_MoneyDialogVar(4,"GEN_CheckMagicPocketGold_4_5dac5eea-faeb-459c-b675-46c51519b784");
DB_FirstGoal_MoneyDialogVar(5,"GEN_CheckMagicPocketGold_5_8860ed48-ba5f-4b7b-82bf-f1220f967d41");
DB_FirstGoal_MoneyDialogVar(6,"GEN_CheckMagicPocketGold_6_ebf7de6b-4598-4feb-9c50-8083fc0fc59d");
DB_FirstGoal_MoneyDialogVar(7,"GEN_CheckMagicPocketGold_7_4f22f91f-28ec-8f22-c546-1f8b69a2725a");

DB_FirstGoal_CheckPocketGoldSpeakerVar(1,"GEN_CheckPocketGold_SpeakerIndex_8504b4e0-886e-4912-9525-fbe559c5f8ff");
DB_FirstGoal_CheckPocketGoldSpeakerVar(2,"GEN_CheckPocketGold_2_SpeakerIndex_a9c4d456-3ef5-491d-a1eb-49f09b91e8b4");
DB_FirstGoal_CheckPocketGoldSpeakerVar(3,"GEN_CheckPocketGold_3_SpeakerIndex_d7fa1537-77d4-4d7d-a955-7ffda90e6207");
DB_FirstGoal_CheckPocketGoldSpeakerVar(4,"GEN_CheckPocketGold_4_SpeakerIndex_5c499066-448b-4d0c-8dc9-d1553d04c6d4");
DB_FirstGoal_CheckPocketGoldSpeakerVar(5,"GEN_CheckPocketGold_5_SpeakerIndex_65757687-b815-43fe-be9c-1cefe82efb60");
DB_FirstGoal_CheckPocketGoldSpeakerVar(6,"GEN_CheckPocketGold_6_SpeakerIndex_197aa5e5-de7f-2ff0-7ec7-268384b5ca7c");
DB_FirstGoal_CheckPocketGoldSpeakerVar(7,"GEN_CheckPocketGold_7_SpeakerIndex_051d7620-9791-488f-8a0e-f5791367fe59");

//Has item template dialog variables
DB_FirstGoal_HasItemTemplate_TemplateVar(1,"GEN_CheckHasItemTemplate_Template_ae6d2014-ca40-414b-a222-84b87efb1f05");
DB_FirstGoal_HasItemTemplate_TemplateVar(2,"GEN_CheckHasItemTemplate_Template_2_1c16723d-50a0-4917-a198-0970edb93555");
DB_FirstGoal_HasItemTemplate_TemplateVar(3,"GEN_CheckHasItemTemplate_Template_3_3965b187-cbef-40cd-9d7c-37bcb37ea2cd");
DB_FirstGoal_HasItemTemplate_TemplateVar(4,"GEN_CheckHasItemTemplate_Template_4_4343086d-0af4-4509-8af7-efb6ae4ca057");
DB_FirstGoal_HasItemTemplate_TemplateVar(5,"GEN_CheckHasItemTemplate_Template_5_069bdd27-9c44-4f21-b062-fcf75a541407");

DB_FirstGoal_HasItemTemplate_SpeakerVar(1,"GEN_CheckHasItemTemplate_Speaker_a41274ae-7edf-4f3d-a137-dd45978c6224");
DB_FirstGoal_HasItemTemplate_SpeakerVar(2,"GEN_CheckHasItemTemplate_Speaker_2_2674a9aa-1c71-42c3-977e-ffee67be69c6");
DB_FirstGoal_HasItemTemplate_SpeakerVar(3,"GEN_CheckHasItemTemplate_Speaker_3_7f89238b-be41-4d7a-a9a8-6dc74a2ef8be");
DB_FirstGoal_HasItemTemplate_SpeakerVar(4,"GEN_CheckHasItemTemplate_Speaker_4_33065191-7bc1-40dc-bd8c-3b897abb591e");
DB_FirstGoal_HasItemTemplate_SpeakerVar(5,"GEN_CheckHasItemTemplate_Speaker_5_4fa046a9-a305-4b89-8383-ff6173a8b774");

DB_FirstGoal_HasItemTemplate_AmountVar(1,"GEN_CheckHasItemTemplate_Amount_573b8076-ac9f-4c43-9161-f6eb76a90781");
DB_FirstGoal_HasItemTemplate_AmountVar(2,"GEN_CheckHasItemTemplate_Amount_2_0663d6aa-c918-4b65-85a7-bd8e10247734");
DB_FirstGoal_HasItemTemplate_AmountVar(3,"GEN_CheckHasItemTemplate_Amount_3_3837a5d2-c5d1-4200-bb5c-d7b8ad45f53a");
DB_FirstGoal_HasItemTemplate_AmountVar(4,"GEN_CheckHasItemTemplate_Amount_4_32f62ba7-e482-4651-8927-636de5701edc");
DB_FirstGoal_HasItemTemplate_AmountVar(5,"GEN_CheckHasItemTemplate_Amount_5_51db6483-c37d-4e38-b423-ebeb975571ac");

DB_FirstGoal_HasItemTemplate_MoveAndReportVar(1,"GEN_CheckHasItemTemplateInMagicPockets_MoveAndReport_be71112b-b695-0105-2287-da42f04d3640");
DB_FirstGoal_HasItemTemplate_MoveAndReportVar(2,"GEN_CheckHasItemTemplateInMagicPockets_MoveAndReport_2_60877960-2b33-3727-0341-67999b9d4176");
DB_FirstGoal_HasItemTemplate_MoveAndReportVar(3,"GEN_CheckHasItemTemplateInMagicPockets_MoveAndReport_3_3a6d57e8-6548-0be9-aa3c-760fca2f8b02");
DB_FirstGoal_HasItemTemplate_MoveAndReportVar(4,"GEN_CheckHasItemTemplateInMagicPockets_MoveAndReport_4_cc7e9ca0-43ac-d8fa-8b18-9942f1feceb5");
DB_FirstGoal_HasItemTemplate_MoveAndReportVar(5,"GEN_CheckHasItemTemplateInMagicPockets_MoveAndReport_5_6007fc56-ec7c-616b-38b8-f91b4b824720");

// Keeping track of seen dead NPCs. Sets party flag
// DB_SeenDeadNPCPartyFlag((CHARACTERGUID)_NPC,(STRING)_PartyFlag);
NOT DB_SeenDeadNPCPartyFlag((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_SeenDeadNPCGlobalFlag((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_SeenPermaDefeatedNPCPartyFlag((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_SeenPermaDefeatedNPCGlobalFlag((CHARACTER)NULL_00000000-0000-0000-0000-000000000000,(FLAG)NULL_00000000-0000-0000-0000-000000000000);

DB_ReregisterObjectsOnRegionSwap("GLO_NPCSeesEvents");

//Database Declarations
NOT DB_GLO_DefeatCounter((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_GLO_DefeatCounter_Target("", 0);
NOT DB_PreventPermaDefeated((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CustomDefeatedState((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_DialogStarted_IgnoreStopConditions((DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_OnEntered((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_OnTurn((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000,0);
NOT DB_CombatReact_AD_OnDeath((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_OnDeathOther((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_OnDeathPostCombat((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_VB_OnDeathPostCombat((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(VOICEBARKRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_OnHPPercentage((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000,0);
NOT DB_CombatReact_AD_OnMiss((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_OnMiss((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,(DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000,(GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_OnCast(NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_CombatReact_AD_OnCastOther(NULL_00000000-0000-0000-0000-000000000000, NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_CombatReact_AD_AppliedStatus(NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_CombatReact_AD_AppliedStatusGroup(NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_CombatReact_AD_StatusRemoved(NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_CombatReact_Timer((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000,"");
NOT DB_PreventKnockedOutPermaDefeated((CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_CombatReact_AD_AppliedStatusToPlayer(NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_CombatReact_AD_AppliedStatusToPlayerByOthers(NULL_00000000-0000-0000-0000-000000000000, (DIALOGRESOURCE)NULL_00000000-0000-0000-0000-000000000000, "",NULL_00000000-0000-0000-0000-000000000000);


// Defeated and PermaDefeated events
// Use global flags to react to when something transitions to these two states.
NOT DB_DeadOnceFlag((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_DeadStateFlag((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);

NOT DB_DefeatedOnceFlag((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_DefeatedStateFlag((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);

NOT DB_PermaDefeatedFlag((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);

NOT DB_PermanentlyEvil((CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
NOT DB_Dominated((CHARACTER)NULL_00000000-0000-0000-0000-000000000000);

DB_BooleanStrings(1,"True");
DB_BooleanStrings(1,"TRUE");
DB_BooleanStrings(1,"true");
DB_BooleanStrings(1,"T");
DB_BooleanStrings(1,"t");
DB_BooleanStrings(1,"1");
DB_BooleanStrings(0,"False");
DB_BooleanStrings(0,"FALSE");
DB_BooleanStrings(0,"false");
DB_BooleanStrings(0,"F");
DB_BooleanStrings(0,"f");
DB_BooleanStrings(0,"0");
NOT DB_RandomizeStartOrigin(1);

// used in conjunction with GameOption("startOrigin",%string%)
DB_PredefinedOriginOptions("Astarion",(CHARACTER)S_Player_Astarion_c7c13742-bacd-460a-8f65-f864fe41f255);
DB_PredefinedOriginOptions("Gale",(CHARACTER)S_Player_Gale_ad9af97d-75da-406a-ae13-7071c563f604);
DB_PredefinedOriginOptions("Laezel",(CHARACTER)S_Player_Laezel_58a69333-40bf-8358-1d17-fff240d7fb12);
DB_PredefinedOriginOptions("Wyll",(CHARACTER)S_Player_Wyll_c774d764-4a17-48dc-b470-32ace9ce447d);
DB_PredefinedOriginOptions("Shadowheart",(CHARACTER)S_Player_ShadowHeart_3ed74f06-3c60-42dc-83f6-f034cb47c679);
DB_PredefinedOriginOptions("Karlach",(CHARACTER)S_Player_Karlach_2c76687d-93a2-477b-8b18-8a14b549304c);
DB_PredefinedOriginOptions("DarkUrge",(CHARACTER)S_Player_DarkUrge_c66bc36f-7cb0-41fa-92f0-6d81d7d17ba3);
DB_PredefinedOriginOptions("Vel",(CHARACTER)S_Player_Vel_f83fe475-863b-4325-acf0-106d7bbccb5f);

// Track all status that can cause character to be in DB_Defeated
// DB_DefeatedCauses((GUIDSTRING)_Entity, (STRING)_Cause, (INTEGER)_IsCustom);
NOT DB_DefeatedCauses((GUIDSTRING)NULL_00000000-0000-0000-0000-000000000000, "", 0);
NOT DB_Hirelings_HACK_Classes((FLAG)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (FLAG)NULL_00000000-0000-0000-0000-000000000000);
KBSECTION
// Since storyeditor orders goals alphabetically, this is the only way to make sure this goal comes first in story.div
// This is important because Osiris uses rule order to execute alternatives.

//REGION Dialog book keeping 
IF
DialogRequestFailed(_Dialog,_Inst)
THEN
PROC_GetInvolvedPlayers(_Inst);
PROC_GetInvolvedNPCs(_Inst);
PROC_SaveNumActors(_Inst);
DB_DialogRequestFailed(_Dialog,_Inst);

IF
AutomatedDialogRequestFailed(_Dialog,_Inst)
THEN
PROC_GetInvolvedPlayers(_Inst);
PROC_GetInvolvedNPCs(_Inst);
PROC_SaveNumActors(_Inst);
DB_AutomatedDialog(_Inst);
DB_DialogRequestFailed(_Dialog,_Inst);

IF
DialogStarted(_Dialog,_Inst)
THEN
PROC_GetInvolvedPlayers(_Inst);
PROC_GetInvolvedNPCs(_Inst);
PROC_SaveNumActors(_Inst);
PROC_SetDialogGoldCheckAmount(_Dialog, _Inst);
PROC_SetDialogItemTemplateCheckAmount(_Dialog);
DB_DialogName(_Dialog,_Inst);
PROC_DialogStarted_CheckForStopConditions(_Dialog,_Inst);
PROC_DialogStarted(_Dialog,_Inst);

IF
InstanceDialogChanged(_Inst,_OldDialog,_NewDialog, _)
AND
DB_DialogName(_OldDialog,_Inst)
THEN
NOT DB_DialogName(_OldDialog,_Inst);
DB_DialogName(_NewDialog,_Inst);

//our dialog is switching to a new instance and remapped speakers
//update our DB
IF
ActorSpeakerIndexChanged(_Inst,_Speaker,_OldIndex,_NewIndex)
AND
IntegerSum(_OldIndex, 1, _OldIndexOneBased)
AND
IntegerSum(_NewIndex, 1, _NewIndexOneBased)
THEN
DB_DialogInstance_SpeakersRemapped(_Inst);
DB_DialogInstance_SpeakersToSwap(_Inst,_Speaker,_OldIndexOneBased,_NewIndexOneBased);

IF
InstanceDialogChanged(_Inst,_OldDialog,_NewDialog, _)
AND
DB_DialogInstance_SpeakersRemapped(_Inst)
THEN
NOT DB_DialogInstance_SpeakersRemapped(_Inst);
PROC_RefreshInvolvedPlayers(_Inst);
PROC_RefreshInvolvedNPCs(_Inst);
PROC_RefreshInvolvedSpeakers(_Inst);

//always update dialog variables when instances change
IF
InstanceDialogChanged(_Inst,_,_NewDialog, _)
THEN
PROC_SetDialogGoldCheckAmount(_NewDialog, _Inst);
PROC_SetDialogItemTemplateCheckAmount(_NewDialog);

//our old dialog didn't stop, so this is us transitioning into a new nested dialog
IF
InstanceDialogChanged(_Inst,_,_NewDialog, 0)
THEN
PROC_DialogStarted(_NewDialog,_Inst);

PROC
PROC_DialogStarted((DIALOGRESOURCE)_Dialog,(INTEGER)_Inst)
THEN
DB_NOOP(1);

IF
DialogEnded(_Dialog,_Inst)
THEN
DB_DialogEnding(_Dialog,_Inst);

IF
AutomatedDialogEnded(_Dialog,_Inst)
THEN
DB_DialogEnding(_Dialog,_Inst);

IF
DialogActorJoined(_Dialog,_Inst,_Actor,_Index)
AND
IntegerSum(_Index,1,_OneBasedIndex)
THEN
DB_DialogSpeakers(_Inst,_Actor,_OneBasedIndex);
PROC_AddActorToDialogList(_Inst,_Actor);

IF
VoiceBarkStarted(_,_Inst)
THEN
DB_AutomatedDialogIsVB(_Inst);

IF
AutomatedDialogStarted(_Dialog,_Inst)
THEN
PROC_GetInvolvedPlayers(_Inst);
PROC_GetInvolvedNPCs(_Inst);
PROC_SaveNumActors(_Inst);
DB_AutomatedDialog(_Inst);
DB_DialogName(_Dialog,_Inst);
PROC_DialogStarted_CheckForStopConditions(_Dialog,_Inst);

QRY
QRY_IsPlayerActor((GUIDSTRING)_Actor)
AND
DB_Players((CHARACTER)_Actor)
THEN
DB_NOOP(1);

//non multiplayer party members (ie fake companions)
//TODO: exclude Henchmen when we get them
QRY
QRY_IsPlayerActor((GUIDSTRING)_Actor)
AND
IsCharacter(_Actor,1)
AND
IsPartyMember((CHARACTER)_Actor, 0, 1)
AND
IsSummon(_Actor,0)
AND
IsPartyFollower(_Actor,0)
THEN
DB_NOOP(1);

 //If one of the dialog players has died or is downed when the dialog starts, stop the dialog
PROC
PROC_DialogStarted_CheckForStopConditions((DIALOGRESOURCE)_Dialog,(INTEGER)_Inst)
AND
NOT DB_DialogStarted_IgnoreStopConditions(_Dialog) //Add any exceptions (dialogs that can run with dead/downed players) to this DB.
AND
QRY_OnlyOnce_Reset("DialogStarted_StopRequested")
AND
DB_DialogPlayers(_Inst,_Player,_)
AND
QRY_DialogStarted_CheckPlayerForStopConditions(_Inst,_Player)
AND
QRY_OnlyOnce("DialogStarted_StopRequested")
THEN
DialogRequestStopForDialog(_Dialog,_Player);
PROC_DialogStoppedBecauseDeadDownedPlayer(_Dialog,_Player);

PROC
PROC_DialogStoppedBecauseDeadDownedPlayer((DIALOGRESOURCE)_Dialog,(GUIDSTRING)_Player)
THEN
DB_NOOP(1);

QRY
QRY_DialogStarted_CheckPlayerForStopConditions((INTEGER)_Inst,(GUIDSTRING)_Player)
AND
NOT DB_DialogDeath((CHARACTER)_Player)
AND
DB_Dead(_Player)
THEN
DB_NOOP(1);

QRY
QRY_DialogStarted_CheckPlayerForStopConditions((INTEGER)_Inst,(GUIDSTRING)_Player)
AND
NOT QRY_DialogStarted_CheckPlayerForStopConditions_IgnoreDowned((INTEGER)_Inst,(CHARACTER)_Player)
AND
DB_Downed((CHARACTER)_Player)
THEN
DB_NOOP(1);

QRY
QRY_DialogStarted_CheckPlayerForStopConditions_IgnoreDowned((INTEGER)_Inst,(CHARACTER)_Player)
AND
1 == 2
THEN
DB_NOOP(1);

QRY
QRY_DialogStarted_CheckPlayerForStopConditions((INTEGER)_Inst,(GUIDSTRING)_Player)
AND
DB_Is_Banished((CHARACTER)_Player)
THEN
DB_NOOP(1);

//add these in the back so we don't disrupt the original flow
PROC
PROC_AddActorToDialogList((INTEGER)_Inst,(GUIDSTRING)_Actor)
AND
QRY_IsPlayerActor(_Actor)
THEN
PROC_AddPlayerActorToDialogList(_Inst, _Actor);
DB_ActorAddedToList(1);

PROC
PROC_AddActorToDialogList((INTEGER)_Inst,(GUIDSTRING)_Actor)
AND
NOT DB_ActorAddedToList(1)
THEN
PROC_AddNPCActorToDialogList(_Inst, _Actor);

PROC
PROC_AddActorToDialogList(_,_)
THEN
NOT DB_ActorAddedToList(1);

PROC
PROC_AddPlayerActorToDialogList((INTEGER)_Inst, (GUIDSTRING)_Actor)
AND
NOT DB_DialogPlayers(_Inst,_Actor,_)
AND
DB_DialogNumPlayers(_Inst,_NumPlayers)
AND
IntegerSum(_NumPlayers,1,_NewSlot)
THEN
DB_DialogPlayers(_Inst,(GUIDSTRING)_Actor,_NewSlot);
PROC_SetNumberOfInvolvedActors(_Inst);

PROC
PROC_AddNPCActorToDialogList((INTEGER)_Inst,(GUIDSTRING)_Actor)
AND
NOT DB_DialogNPCs(_Inst,(GUIDSTRING)_Actor,_)
AND
DB_DialogNumNPCs(_Inst,_NumNPCs)
AND
IntegerSum(_NumNPCs,1,_NewSlot)
THEN
DB_DialogNPCs(_Inst,(GUIDSTRING)_Actor,_NewSlot);
PROC_SetNumberOfInvolvedActors(_Inst);

IF
DB_DialogSpeakers(_Inst,_Actor1,_SpeakerIndex)
AND
DB_DialogSpeakers(_Inst,_Actor2,_SpeakerIndex)
AND
_Actor1 != _Actor2
THEN
NOT DB_DialogSpeakers(_Inst,_Actor2,_SpeakerIndex);

PROC
PROC_SetNumberOfInvolvedActors((INTEGER)_Inst)
AND
DB_DialogNumPlayers(_Inst,_NumPlayers)
AND
DB_DialogNumNPCs(_Inst,_NumNPCs)
THEN
NOT DB_DialogNumPlayers(_Inst,_NumPlayers);
NOT DB_DialogNumNPCs(_Inst,_NumNPCs);
PROC_SaveNumActors(_Inst);

PROC
PROC_SaveNumActors((INTEGER)_Inst)
AND
DialogGetNumberOfInvolvedNPCs(_Inst,_NumNPCs)
AND
DialogGetNumberOfInvolvedPlayers(_Inst,_NumPlayers)
THEN
DB_DialogNumPlayers(_Inst,_NumPlayers);
DB_DialogNumNPCs(_Inst,_NumNPCs);

PROC
PROC_GetInvolvedNPCs((INTEGER)_Inst)
THEN
PROC_GetInvolveNPC(_Inst,1);

PROC
PROC_GetInvolveNPC((INTEGER)_Inst,(INTEGER)_Index)
AND
DialogGetInvolvedNPC(_Inst,_Index,_NPC)
AND
IntegerSum(_Index,1,_New)
THEN
DB_DialogNPCs(_Inst,_NPC,_Index);
PROC_GetInvolveNPC(_Inst,_New);

PROC
PROC_GetInvolvedPlayers((INTEGER)_Inst)
THEN
PROC_GetInvolvePlayer(_Inst,1);

PROC
PROC_GetInvolvePlayer((INTEGER)_Inst,(INTEGER)_Index)
AND
DialogGetInvolvedPlayer(_Inst,_Index,_Player)
AND
IntegerSum(_Index,1,_New)
THEN
DB_DialogPlayers(_Inst,_Player,_Index);
PROC_GetInvolvePlayer(_Inst,_New);

PROC
PROC_RefreshInvolvedPlayers((INTEGER)_Inst)
THEN
PROC_RefreshInvolvedPlayer(_Inst, 1);

PROC
PROC_RefreshInvolvedPlayer((INTEGER)_Inst,(INTEGER)_Index)
AND
DB_DialogPlayers(_Inst,_OldPlayer,_Index)
AND
DialogGetInvolvedPlayer(_Inst,_Index,_Player)
AND
IntegerSum(_Index,1,_New)
THEN
PROC_UpdateInvolvedPlayer(_Inst,_Index,_Player,_OldPlayer);
PROC_RefreshInvolvedPlayer(_Inst,_New);

PROC
PROC_UpdateInvolvedPlayer((INTEGER)_Inst,(INTEGER)_Index,(GUIDSTRING)_Player,(GUIDSTRING)_OldPlayer)
AND
_Player != _OldPlayer
THEN
DB_DialogPlayers(_Inst,_Player,_Index);
DB_DialogPlayersToRemove(_Inst,_OldPlayer,_Index);

PROC
PROC_RefreshInvolvedNPCs((INTEGER)_Inst)
THEN
PROC_RefreshInvolvedNPC(_Inst, 1);

PROC
PROC_RefreshInvolvedNPC((INTEGER)_Inst,(INTEGER)_Index)
AND
DB_DialogNPCs(_Inst,_OldNPC,_Index)
AND
DialogGetInvolvedNPC(_Inst,_Index,_NPC)
AND
IntegerSum(_Index,1,_New)
THEN
PROC_UpdateInvolvedNPC(_Inst,_Index,_NPC,_OldNPC);
PROC_RefreshInvolvedNPC(_Inst,_New);

PROC
PROC_UpdateInvolvedNPC((INTEGER)_Inst,(INTEGER)_Index,(GUIDSTRING)_NPC,(GUIDSTRING)_OldNPC)
AND
_NPC != _OldNPC
THEN
DB_DialogNPCs(_Inst,_NPC,_Index);
DB_DialogNPCsToRemove(_Inst,_OldNPC,_Index);

PROC
PROC_RefreshInvolvedSpeakers((INTEGER)_Inst)
AND
DB_DialogInstance_SpeakersToSwap(_Inst,_Speaker,_OldIndex,_NewIndex)
AND
_OldIndex != _NewIndex
THEN
DB_DialogSpeakers(_Inst,_Speaker,_NewIndex);
DB_DialogSpeakersToRemove(_Inst,_Speaker,_OldIndex);

PROC
PROC_RefreshInvolvedSpeakers((INTEGER)_Inst)
AND
DB_DialogInstance_SpeakersToSwap(_Inst,_Speaker,_OldIndex,_NewIndex)
THEN
NOT DB_DialogInstance_SpeakersToSwap(_Inst,_Speaker,_OldIndex,_NewIndex);

//wait to remove entries, because we might trigger a rule that thinks they left the dialog
PROC
PROC_RefreshInvolvedPlayers((INTEGER)_Inst)
AND
DB_DialogPlayersToRemove(_Inst,_OldPlayer,_Index)
THEN
NOT DB_DialogPlayers(_Inst,_OldPlayer,_Index);
NOT DB_DialogPlayersToRemove(_Inst,_OldPlayer,_Index);

PROC
PROC_RefreshInvolvedNPCs((INTEGER)_Inst)
AND
DB_DialogNPCsToRemove(_Inst,_OldPlayer,_Index)
THEN
NOT DB_DialogNPCs(_Inst,_OldPlayer,_Index);
NOT DB_DialogNPCsToRemove(_Inst,_OldPlayer,_Index);

PROC
PROC_RefreshInvolvedSpeakers((INTEGER)_Inst)
AND
DB_DialogSpeakersToRemove(_Inst,_OldSpeaker,_Index)
THEN
NOT DB_DialogSpeakers(_Inst,_OldSpeaker,_Index);
NOT DB_DialogSpeakersToRemove(_Inst,_OldSpeaker,_Index);

PROC
PROC_SetDialogGoldCheckAmount((DIALOGRESOURCE)_Dialog, (INTEGER)_Instance)
AND
DB_DialogMoneyTransfer((INTEGER)_Index,(DIALOGRESOURCE)_Dialog,(INTEGER)_Amount,(INTEGER)_CheckSpeakerIndex,(INTEGER)_)
AND
// Money transfers only work from players to NPCs and vice versa, so it's fine that this fails for dialogs with only players                                             
DB_DialogNPCs(_Instance,_NPC,1)
AND
NOT DB_DialogMoneyTransfer_ForInstanceWaitingForStart(_Index,_Dialog,_NPC)
AND
DB_FirstGoal_MoneyDialogVar(_Index,_MoneyVarName)
AND
DB_FirstGoal_CheckPocketGoldSpeakerVar(_Index,_SpeakerVarName)
THEN
DialogSetVariableInt(_Dialog,_MoneyVarName,_Amount);
DialogSetVariableInt(_Dialog,_SpeakerVarName,_CheckSpeakerIndex);

PROC
PROC_SetDialogGoldCheckAmount((DIALOGRESOURCE)_Dialog, (INTEGER)_Instance)
AND
DB_DialogMoneyTransfer((INTEGER)_Index,(DIALOGRESOURCE)_Dialog,(INTEGER)_Amount,(INTEGER)_CheckSpeakerIndex,(INTEGER)_TargetDBIndex)
AND
DB_DialogNPCs(_Instance,_NPC,1)
AND
DB_DialogMoneyTransfer_ForInstanceWaitingForStart(_Index,_Dialog,_NPC)
AND
DB_FirstGoal_MoneyDialogVar(_Index,_MoneyVarName)
AND
DB_FirstGoal_CheckPocketGoldSpeakerVar(_Index,_SpeakerVarName)
THEN
NOT DB_DialogMoneyTransfer_ForInstance(_Index,_Dialog,_NPC);
DB_DialogMoneyTransfer_InstanceData(_Instance,_Index,_Amount,_CheckSpeakerIndex,_TargetDBIndex);
DialogSetVariableIntForInstance(_Instance,_MoneyVarName,_Amount);
DialogSetVariableIntForInstance(_Instance,_SpeakerVarName,_CheckSpeakerIndex);

// QRY_StartDialog was successful -> copy DB_DialogMoneyTransfer_ForInstance to new DB so that if 
// QRY_StartDialog gets called again for the same dialog/NPC before the DialogStarted event from
// the first call arrives, it won't reset the ForInstance setting
IF
DB_StartedDialog(_Dialog, _NPC, _Speaker2, _Speaker3, _Speaker4, _Speaker5, _Speaker6)
AND
DB_DialogMoneyTransfer_ForInstance(_Index,_Dialog,_NPC)
THEN
NOT DB_DialogMoneyTransfer_ForInstance(_Index,_Dialog,_NPC);
DB_DialogMoneyTransfer_ForInstanceWaitingForStart(_Index,_Dialog,_NPC);

IF
DialogRequestFailed(_Dialog,_)
AND
DB_DialogNPCs(_Instance,_NPC,1)
AND
DB_DialogMoneyTransfer_ForInstanceWaitingForStart(_Index,_Dialog,_NPC)
THEN
NOT DB_DialogMoneyTransfer_ForInstanceWaitingForStart(_Index,_Dialog,_NPC);

QRY
QRY_StartDialogFailed((DIALOGRESOURCE)_Dialog, (GUIDSTRING)_Speaker1, (GUIDSTRING)_Speaker2, (GUIDSTRING)_Speaker3, (GUIDSTRING)_Speaker4, (GUIDSTRING)_Speaker5, (GUIDSTRING)_Speaker6)
AND
DB_DialogMoneyTransfer_ForInstance(_Index,_Dialog,_Speaker1)
THEN
NOT DB_DialogMoneyTransfer_ForInstance(_Index,_Dialog,_Speaker1);

IF
DialogEnded(_,_Instance)
AND
DB_DialogMoneyTransfer_InstanceData(_Instance,_Index,_Amount,_CheckSpeakerIndex,_TargetDBIndex)
THEN
NOT DB_DialogMoneyTransfer_InstanceData(_Instance,_Index,_Amount,_CheckSpeakerIndex,_TargetDBIndex);

PROC
PROC_SetDialogItemTemplateCheckAmount((DIALOGRESOURCE)_Dialog)
AND
DB_HasItemTemplateScriptFlag((INTEGER)_TemplateVarIndex, (DIALOGRESOURCE)_Dialog, (GUIDSTRING)_ItemTemplate, (INTEGER)_SpeakerIndex, (INTEGER)_Amount, (INTEGER)_MoveAndReport)
AND
DB_FirstGoal_HasItemTemplate_TemplateVar(_TemplateVarIndex, _TemplateVarName)
AND
DB_FirstGoal_HasItemTemplate_SpeakerVar(_TemplateVarIndex, _SpeakerVarName)
AND
DB_FirstGoal_HasItemTemplate_AmountVar(_TemplateVarIndex, _AmountVarName)
AND
DB_FirstGoal_HasItemTemplate_MoveAndReportVar(_TemplateVarIndex, _MoveAndReportVarName)
AND
GUIDToString(_ItemTemplate,_ItemTemplateStr)
THEN
DialogSetVariableString(_Dialog, _TemplateVarName, _ItemTemplateStr);
DialogSetVariableInt(_Dialog, _SpeakerVarName, _SpeakerIndex);
DialogSetVariableInt(_Dialog, _AmountVarName, _Amount);
DialogSetVariableInt(_Dialog, _MoveAndReportVarName, _MoveAndReport);

//Camp enter dialog stopping
IF
TeleportedToCamp(_Character)
AND
IsSpeakerReserved(_Character,0)
THEN
PROC_ForceStopDialog(_Character);

//END_REGION

//REGION Player/character trigger checking

QRY
QRY_CheckOtherPlayersInTrigger((CHARACTER)_Player,(TRIGGER)_CheckTrigger)
AND
DB_Players(_Other)
AND
_Other!=_Player 
AND
DB_InRegion(_Other, _CheckTrigger)
THEN
DB_NOOP(1);

QRY
QRY_CheckOtherPartyMembersInTrigger((CHARACTER)_Player,(TRIGGER)_CheckTrigger)
AND
DB_PartyMembers(_Other)
AND
_Other!=_Player 
AND
DB_InRegion(_Other, _CheckTrigger)
THEN
DB_NOOP(1);

QRY
QRY_AnyCharacterInTrigger((TRIGGER)_CheckTrigger)
AND
DB_InRegion(_, _CheckTrigger)
THEN
DB_NOOP(1);

QRY
QRY_AnyAvatarInTrigger((TRIGGER)_CheckTrigger)
AND
DB_Avatars(_Avatar)
AND
DB_InRegion(_Avatar, _CheckTrigger)
THEN
DB_NOOP(1);

QRY
QRY_AnyPlayerInTrigger((TRIGGER)_CheckTrigger)
AND
DB_Players(_Player)
AND
DB_InRegion(_Player, _CheckTrigger)
THEN
DB_NOOP(1);

QRY
QRY_AnyPlayerNotInTrigger((TRIGGER)_CheckTrigger)
AND
DB_Players(_Player)
AND
NOT DB_InRegion(_Player, _CheckTrigger)
THEN
DB_NOOP(1);

QRY
QRY_AnyPartyMemberInTrigger((TRIGGER)_CheckTrigger)
AND
DB_PartyMembers(_PartyMember)
AND
DB_InRegion(_PartyMember, _CheckTrigger)
THEN
DB_NOOP(1);

//END_REGION

//REGION Notifications for region-bound objects
// _ID: unique identifier unique to recognise when you get notified
// _Object: send notification when _Object exists for the first time
//   * Notification: call to PROC_LevelObjectRegistered(_ID,_Object);
//   * Similar for unregistering: call to PROC_LevelObjectUnregistered(_ID,_Object)
// If DB_ReregisterObjectsOnRegionSwap(_ID) is defined, PROC_LevelObjectRegistered() will be called
//   every time a region is entered in which the objects exist.
PROC
PROC_RegisterLevelObject((STRING)_ID, (GUIDSTRING)_Object)
AND
Exists(_Object,1)
AND
GetRegion(_Object,_Level)
AND
// Filter out double registrations (for the same level; a global object can still be registered for multiple levels)
NOT DB_RegisteredLevelObjects(_ID,_Level,_Object)
THEN
DB_RegisteredLevelObjects(_ID,_Level,_Object);
PROC_DoRegisterLevelObject(_ID,_Level,_Object);

PROC
PROC_RegisterLevelObject((STRING)_ID, (GUIDSTRING)_Object)
AND
NOT DB_LevelObjectsToRegister_WaitForLevel(_ID,_Object)
AND
Exists(_Object,0)
THEN
DB_LevelObjectsToRegister_WaitForLevel((STRING)_ID,(GUIDSTRING)_Object);

IF
LevelLoaded(_Level)
AND
DB_LevelObjectsToRegister_WaitForLevel((STRING)_ID,(GUIDSTRING)_Object)
THEN
PROC_RegisterLevelObject((STRING)_ID, (GUIDSTRING)_Object); //try again

IF
LevelLoaded(_Level)
AND
DB_LevelObjectsToRegister_WaitForLevel((STRING)_ID,(GUIDSTRING)_Object)
AND
DB_RegisteredLevelObjects(_ID,_Level,_Object)
THEN
NOT DB_LevelObjectsToRegister_WaitForLevel((STRING)_ID,(GUIDSTRING)_Object);

PROC
PROC_DoRegisterLevelObject((STRING)_ID,(STRING)_Level,(GUIDSTRING)_Object)
AND
Exists(_Object,0)
THEN
DB_LevelObjectsToRegister(_ID,_Level,_Object);

PROC
PROC_DoRegisterLevelObject((STRING)_ID,(STRING)_Level,(GUIDSTRING)_Object)
AND
Exists(_Object,1)
AND
NOT GetRegion(_Object,_Level)
THEN
DB_LevelObjectsToRegister(_ID,_Level,_Object);

PROC
PROC_DoRegisterLevelObject((STRING)_ID,(STRING)_Level,(GUIDSTRING)_Object)
AND
NOT DB_LevelObjectsToRegister(_ID,_Level,_Object)
THEN
PROC_LevelObjectRegistered(_ID,_Object);

PROC
PROC_UnregisterLevelObject((STRING)_ID, (GUIDSTRING)_Object)
AND
DB_RegisteredLevelObjects(_ID,_Level,_Object)
AND
NOT DB_CurrentLevel(_Level)
THEN
DB_LevelObjectsToUnregister(_ID,_Level,_Object);


PROC
PROC_UnregisterLevelObject((STRING)_ID, (GUIDSTRING)_Object)
AND
DB_RegisteredLevelObjects(_ID,_Level,_Object)
AND
NOT DB_LevelObjectsToUnregister(_ID,_Level,_Object)
THEN
PROC_LevelObjectUnregistered(_ID,_Object);

PROC
PROC_UnregisterLevelObject((STRING)_ID, (GUIDSTRING)_Object)
AND
DB_RegisteredLevelObjects(_ID,_Level,_Object)
THEN
NOT DB_RegisteredLevelObjects(_ID,_Level,_Object);

IF
DB_LevelObjectsToUnregister(_ID,_Level,_Object)
THEN
NOT DB_LevelObjectsToRegister(_ID,_Level,_Object);

IF
DB_LevelObjectsToRegister(_ID,_Level,_Object)
THEN
NOT DB_LevelObjectsToUnregister(_ID,_Level,_Object);

IF
LevelLoaded(_Level)
AND
NOT DB_RegisteredObjectsLevel(_Level)
THEN
SysClear("DB_RegisteredObjectsLevel",1);
DB_RegisteredObjectsLevel(_Level);
PROC_UnregisterObjectsForRegion(_Level);
PROC_RegisterObjectsForRegion(_Level);

PROC
PROC_UnregisterObjectsForRegion((STRING)_Level)
AND
DB_LevelObjectsToUnregister(_ID,_Level,_Object)
THEN
PROC_LevelObjectUnregistered(_ID,_Object);
NOT DB_LevelObjectsToUnregister(_ID,_Level,_Object);

PROC
PROC_UnregisterObjectsForRegion((STRING)_Level)
AND
DB_LevelObjectsToUnregister(_ID,_Level,_Object)
THEN
PROC_LevelObjectUnregistered(_ID,_Object);
NOT DB_LevelObjectsToUnregister(_ID,_Level,_Object);

PROC
PROC_RegisterObjectsForRegion((STRING)_Level)
AND
DB_ReregisterObjectsOnRegionSwap((STRING)_ID)
AND
DB_RegisteredLevelObjects(_ID,_Level,_Object)
AND
NOT DB_LevelObjectsToRegister(_ID,_Level,_Object)
THEN
PROC_LevelObjectRegistered(_ID,_Object);

PROC
PROC_RegisterObjectsForRegion((STRING)_Level)
AND
DB_LevelObjectsToRegister(_ID,_Level,_Object)
THEN
PROC_LevelObjectRegistered(_ID,_Object);
NOT DB_LevelObjectsToRegister(_ID,_Level,_Object);

PROC
PROC_LevelBecameUnreachable((STRING)_Level)
AND
DB_LevelObjectsToRegister(_ID,_Level,_Object)
THEN
NOT DB_LevelObjectsToRegister(_ID,_Level,_Object);

PROC
PROC_LevelBecameUnreachable((STRING)_Level)
AND
DB_LevelObjectsToUnregister(_ID,_Level,_Object)
THEN
NOT DB_LevelObjectsToUnregister(_ID,_Level,_Object);

//END_REGION

//REGION Sight

//REGION Buffer seeing events (by default only for players and party followers)
IF		
Saw(_Char1,_Char2,_)
THEN
DB_Sees(_Char1, _Char2);

IF		
LostSightOf(_Char1,_Char2)
THEN	
NOT DB_Sees(_Char1, _Char2);
//END_REGION

//REGION Start/stop sight event generation for specific NPCs
// Players and party followers are sight generators by default,
// and their sight event generation cannot be changed
QRY
QRY_IsDefaultSightGenerator((CHARACTER)_Obj)
AND
DB_Players(_Obj)
THEN
DB_NOOP(1);

QRY
QRY_IsDefaultSightGenerator((CHARACTER)_Obj)
AND
DB_PartyFollowers(_Obj)
THEN
DB_NOOP(1);

PROC
PROC_StartNPCSightEvents((CHARACTER)_Npc)
AND
QRY_IsDefaultSightGenerator(_Npc)
AND
GUIDToString(_Npc, _NPCGuid)
AND
Concatenate("Trying to enable sight events for character, but it's a player or party follower and those always generate sight events: ", _NPCGuid, _Message)
THEN
DebugBreak(_Message);

PROC
PROC_StartNPCSightEvents((CHARACTER)_Npc)
AND
NOT QRY_IsDefaultSightGenerator(_Npc)
THEN
PROC_ObjectCountHelper((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount");
PROC_RegisterLevelObject("GLO_StartNPCSightEvents", _Npc);

// Only gets sent the first time an Npc gets registered in the current level 
PROC
PROC_LevelObjectRegistered("GLO_StartNPCSightEvents", (GUIDSTRING)_Npc)
THEN
StartSightEvents((CHARACTER)_Npc);

// Decrease spotting reference count and if last one, stop spotting
PROC
PROC_StopNPCSightEvents((CHARACTER)_Npc)
AND
NOT DB_ObjectCountHelper((GUIDSTRING)_NPC, "GLO_NPCSightEventsRefCount", _)
AND
GUIDToString(_NPC, _NPCGuid)
AND
Concatenate("Trying to disable sight events for NPC, but sight events were never started for it: ", _NPCGuid, _Message)
THEN
DebugBreak(_Message);

PROC
PROC_StopNPCSightEvents((CHARACTER)_Npc)
AND
DB_ObjectCountHelper((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount", (INTEGER)_Count)
AND
_Count == 0
AND
GUIDToString(_Npc, _NPCGuid)
AND
Concatenate("Trying to disable sight events for NPC, but its sight events refcount is already 0: ", _NPCGuid, _Message)
THEN
DebugBreak(_Message);

// Refcount 1 -> unregister
PROC
PROC_StopNPCSightEvents((CHARACTER)_Npc)
AND
DB_ObjectCountHelper((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount", 1)
THEN
PROC_UnregisterLevelObject("GLO_StartNPCSightEvents", _Npc);

// Decrease refcount
PROC
PROC_StopNPCSightEvents((CHARACTER)_Npc)
AND
DB_ObjectCountHelper((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount", _Count)
AND
_Count > 0
THEN
PROC_ObjectCountHelper(_Npc, "GLO_NPCSightEventsRefCount", -1);

PROC
PROC_LevelObjectUnregistered("GLO_StartNPCSightEvents", (GUIDSTRING)_Npc)
AND
// Safety check for what called via the events below (when Npc became player/party follower)
NOT QRY_IsDefaultSightGenerator((CHARACTER)_Npc)
THEN
StopSightEvents(_Npc);

// If a character becomes a player or party follower, it automatically becomes a sight event generator and must not be manually disabled anymore
IF
DB_ObjectCountHelper((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount", _Count)
AND
_Count > 0
AND
DB_Players((CHARACTER)_Npc)
THEN
PROC_ObjectCountHelperReset((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount");
PROC_UnregisterLevelObject("GLO_StartNPCSightEvents", _Npc);

IF
DB_ObjectCountHelper((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount", _Count)
AND
_Count > 0
AND
DB_PartyFollowers((CHARACTER)_Npc)
THEN
PROC_ObjectCountHelperReset((GUIDSTRING)_Npc, "GLO_NPCSightEventsRefCount");
PROC_UnregisterLevelObject("GLO_StartNPCSightEvents", _Npc);

//END_REGION

IF
DB_Sees(_Player,_Npc)
AND
DB_Players(_Player)
AND
DB_SeenAliveNPCPartyFlag((CHARACTER)_Npc,(FLAG)_PartyFlag)
AND
NOT DB_Dead(_Npc)
THEN
SetFlag((FLAG)_PartyFlag, _Player); // flagType: Party

PROC
PROC_ForceUpdateDBSees((CHARACTER)_Char1, (CHARACTER)_Char2)
AND
CanSee(_Char1, _Char2, _CanSee)
THEN
PROC_UpdateDBSees(_Char1, _Char2, _CanSee);

PROC
PROC_UpdateDBSees((CHARACTER)_Char1, (CHARACTER)_Char2, 0)
AND
DB_Sees(_Char1, _Char2)
THEN
NOT DB_Sees(_Char1, _Char2);

PROC
PROC_UpdateDBSees((CHARACTER)_Char1, (CHARACTER)_Char2, 1)
AND
NOT DB_Sees(_Char1, _Char2)
THEN
DB_Sees(_Char1, _Char2);

//END_REGION

//REGION Buffer region events
IF	
EnteredTrigger(_Npc,_Region)
THEN
DB_InRegion(_Npc, _Region);

IF
LeftTrigger(_Npc,_Region)
THEN
NOT DB_InRegion(_Npc, _Region);
DB_WasInRegion(_Npc,_Region);
//END_REGION

//REGION Low Level Object States
IF
Dying(_Npc)
THEN
DB_DefeatedCauses(_Npc, "Dead", 0);
DB_Dead(_Npc);

IF
Died(_Npc)
AND
NOT DB_Dead(_Npc)
THEN
DB_DefeatedCauses(_Npc, "Dead", 0);
DB_Dead(_Npc);

IF
Resurrected(_Npc)
THEN
RemoveStatus(_Npc, "RESURRECTING", NULL_00000000-0000-0000-0000-000000000000);
NOT DB_DefeatedCauses(_Npc, "Dead", 0);
NOT DB_Dead(_Npc);

IF
DB_Dead(_Character) 
AND
DB_DeadOnceFlag((CHARACTER)_Character,(FLAG)_Event)
AND
GetFlag((FLAG)_Event, NULL_00000000-0000-0000-0000-000000000000, 0) // flagType: Global
THEN
SetFlag((FLAG)_Event, NULL_00000000-0000-0000-0000-000000000000, 0); // flagType: Global

IF
DB_Dead(_Character) 
AND
DB_DeadStateFlag((CHARACTER)_Character,(FLAG)_Flag)
AND
GetFlag((FLAG)_Flag, NULL_00000000-0000-0000-0000-000000000000, 0) // flagType: Global
THEN
SetFlag((FLAG)_Flag, NULL_00000000-0000-0000-0000-000000000000, 0); // flagType: Global

IF
DB_DeadStateFlag((CHARACTER)_Character,(FLAG)_Flag)
AND
DB_GlobalFlag((FLAG)_Flag) // flagType: Global
AND
NOT DB_Dead(_Character)
THEN
ClearFlag((FLAG)_Flag, NULL_00000000-0000-0000-0000-000000000000, 0); // flagType: Global

IF
DestroyedBy(_Item,_,_,_)
THEN
DB_Destroyed(_Item);
PROC_StateSet_Destroyed(_Item);

PROC
PROC_StateSet_Destroyed((ITEM)_Item)
THEN
DB_NOOP(1);

IF
StatusApplied((CHARACTER)_NPC,"SURRENDERED",(GUIDSTRING)_Cause,_)
AND
NOT DB_Surrendered(_NPC)
THEN
DB_DefeatedCauses(_NPC, "Surrendered", 0);
DB_Surrendered(_NPC);
PROC_Surrendered(_NPC,_Cause);

PROC
PROC_Surrendered((CHARACTER)_NPC,(GUIDSTRING)_Cause)
THEN
DB_NOOP(1);

IF
StatusAttempt((CHARACTER)_NPC,"KNOCKED_OUT",_,_)
AND
// If they already have this status, we won't get a StatusApplied event
// and it's not possible that they still have the SURRENDERED status either
HasActiveStatus(_NPC,"KNOCKED_OUT",0)
THEN
DB_KnockingOut(_NPC);

IF
StatusAttemptFailed((CHARACTER)_NPC,"KNOCKED_OUT",_,_)
AND
DB_KnockingOut(_NPC)
THEN
NOT DB_KnockingOut(_NPC);

IF
StatusRemoved((CHARACTER)_NPC,"SURRENDERED",_,_)
AND
DB_Surrendered(_NPC)
AND
// SURRENDERED and KNOCKED_OUT stack, and knocking out someone that surrendered
// should still make them flee after a long rest
NOT DB_KnockingOut(_NPC)
THEN
PROC_Surrendered_Removed(_NPC);

PROC
PROC_Surrendered_Removed((CHARACTER)_NPC)
THEN
NOT DB_DefeatedCauses(_NPC, "Surrendered", 0);
NOT DB_Surrendered(_NPC);
PROC_Surrender_Restore(_NPC);

IF
StatusApplied(_NPC,"KNOCKED_OUT",_Cause,_)
AND
NOT DB_KnockedOut((CHARACTER)_NPC)
AND
CanFight((CHARACTER)_NPC, _CouldFight)
AND
CanJoinCombat(_NPC, _CouldJoinCombat)
AND
GetHasOsirisDialog(_NPC,_HasOsirisDialog)
THEN
NOT DB_KnockingOut(_NPC);
DB_DefeatedCauses(_NPC, "KnockedOut", 0);
DB_KnockedOut((CHARACTER)_NPC);
// Separate DB to avoid having change scripts everywhere if we add a new saved property
DB_KnockedOut_RestoreProperties(_NPC, _CouldFight, _CouldJoinCombat, _HasOsirisDialog);
PROC_SetCanFight(_NPC, 0);
SetCanJoinCombat(_NPC, 0);
SetHasDialog(_NPC,1);
PROC_KnockedOut(_NPC,_Cause);

PROC
PROC_KnockedOut((CHARACTER)_NPC,(GUIDSTRING)_Cause)
THEN
DB_NOOP(1);

IF
StatusRemoved(_NPC,"KNOCKED_OUT",_,_)
AND
DB_PermaDefeated((GUIDSTRING)_NPC)
AND
// The KNOCKED_OUT status gets removed from ironflasked creatures
NOT DB_IronFlasked((CHARACTER)_NPC)
AND
NOT DB_Dead(_NPC)
AND
GUIDToString(_NPC,_UUIDString)
AND
Concatenate("Waking up NPC from KNOCKED_OUT but it was not in DB_PreventKnockedOutPermaDefeated (nor a playable character, nor in DB_PreventPermaDefeated), so it was in and will remain in DB_PermaDefeated: ",_UUIDString,_Message)
THEN
DebugBreak(_Message);

IF
StatusRemoved(_NPC,"KNOCKED_OUT",_,_)
AND
DB_KnockedOut_RestoreProperties((CHARACTER)_NPC, _CouldFight, _CouldJoinCombat, _HadOsirisDialog)
THEN
PROC_SetCanFight(_NPC, _CouldFight);
SetCanJoinCombat(_NPC, _CouldJoinCombat);
SetHasDialog(_NPC, _HadOsirisDialog);
NOT DB_DefeatedCauses(_NPC, "KnockedOut", 0);
NOT DB_KnockedOut((CHARACTER)_NPC);
NOT DB_KnockedOut_RestoreProperties(_NPC, _CouldFight, _CouldJoinCombat, _HadOsirisDialog);
PROC_KnockedOut_Ended((CHARACTER)_NPC);

PROC
PROC_KnockedOut_Ended((CHARACTER)_NPC)
THEN
DB_NOOP(1);

//Sometimes going downed will trigger a heal effect (e.g. HalfOrc's Relentless Endurance) so wait half a second before actually considering someone downed.
IF
DownedChanged(_Character,1)
THEN
RealtimeObjectTimerLaunch(_Character,"GLO_Downed_VerifyStillDowned",500);

IF
DownedChanged(_Character,0)
THEN
RealtimeObjectTimerCancel(_Character,"GLO_Downed_VerifyStillDowned");

IF
ObjectTimerFinished(_Character,"GLO_Downed_VerifyStillDowned")
THEN
DB_DefeatedCauses(_Character, "Downed", 0);
DB_Downed((CHARACTER)_Character);
PROC_Downed(_Character);

PROC
PROC_Downed((CHARACTER)_Player)
THEN
DB_NOOP(1);

IF
DownedChanged(_Character,0)
AND
DB_Downed((CHARACTER)_Character)
THEN
NOT DB_DefeatedCauses(_Character, "Downed", 0);
NOT DB_Downed(_Character);

PROC
PROC_GLO_CursedIronFlask_CreatureWasReleased((CHARACTER)_Character,(CHARACTER)_)
AND
DB_IronFlasked(_Character)
THEN
NOT DB_DefeatedCauses(_Character, "IronFlasked", 0);
NOT DB_IronFlasked(_Character);

IF
InteractionCapabilityChanged(_Character,1)
THEN
NOT DB_Is_EngineBlock_Act(_Character);

IF
InteractionCapabilityChanged(_Character,0)
THEN
DB_Is_EngineBlock_Act(_Character);

IF
ShapeshiftChanged(_Char,_,_,_)
AND
HasActiveStatusWithGroup(_Char,"SG_Polymorph_BeastShape",1)
THEN
DB_Is_WildShaped(_Char);

IF
ShapeshiftChanged(_Character,_,_,_) //ShapeshiftChanged event comes before StatusRemoved event, causing issues like DB_CantTalk being cleared while still QRY_TemporarilyMuted
AND
DB_CurrentMutingStatuses((CHARACTER)_Character,_Status,_Causee)
AND
HasActiveStatus(_Character,_Status,0)
THEN
NOT DB_CurrentMutingStatuses((GUIDSTRING)_Character,_Status,_Causee);
PROC_TryClearMuted((CHARACTER)_Character);

IF
ShapeshiftChanged(_Char,_,_,_)
AND
DB_Is_WildShaped(_Char)
AND
HasActiveStatusWithGroup(_Char,"SG_Polymorph_BeastShape",0)
THEN
NOT DB_Is_WildShaped(_Char);

IF
DialogueCapabilityChanged(_Character,1)
THEN
NOT DB_Is_EngineBlock_Talk(_Character);

IF
DialogueCapabilityChanged(_Character,0)
THEN
DB_Is_EngineBlock_Talk(_Character);

IF
MoveCapabilityChanged(_Character,1)
THEN
NOT DB_Is_EngineBlock_Move(_Character);

IF
MoveCapabilityChanged(_Character,0)
THEN
DB_Is_EngineBlock_Move(_Character);

IF
WentOnStage(_Object,0)
THEN
DB_OffStage(_Object);

IF
WentOnStage(_Object,1)
THEN
NOT DB_OffStage(_Object);

IF
DB_DialogRequestCache_SpeakerList_Speakers(_,_Inst,_Actor,_)
AND
NOT DB_AutomatedDialog(_Inst)
THEN
DB_InteractiveDialogSpeaker(_Inst,_Actor);

IF
DialogActorJoined(_,_Inst,_Actor,_)
AND
NOT DB_AutomatedDialog(_Inst)
AND
NOT DB_InteractiveDialogSpeaker(_Inst,_Actor)
THEN
DB_InteractiveDialogSpeaker(_Inst,_Actor);


IF
DialogRequestFailed(_, _Inst)
AND
DB_InteractiveDialogSpeaker(_Inst,_Actor)
THEN
NOT DB_InteractiveDialogSpeaker(_Inst,_Actor);

IF
DialogActorJoinFailed(_dialog,_Inst,_Actor)
AND
DB_InteractiveDialogSpeaker(_Inst,_Actor)
THEN
NOT DB_InteractiveDialogSpeaker(_Inst,_Actor);

IF
DialogActorLeft(_Dialog,_Inst,_Actor, 0)
AND
DB_InteractiveDialogSpeaker(_Inst,_Actor)
THEN
NOT DB_InteractiveDialogSpeaker(_Inst,_Actor);

IF
DialogEnded(_,_Inst)
AND
DB_InteractiveDialogSpeaker(_Inst,_Actor)
THEN
NOT DB_InteractiveDialogSpeaker(_Inst,_Actor);

IF
StatusApplied(_Object, _PetrifiedStatus,_, _)
AND
NOT DB_DefeatedCauses(_Object, "PermaPetrified", 0)
AND
IsStatusFromGroup(_PetrifiedStatus,"SG_Petrified",1)
AND
GetStatusTurns(_Object,_PetrifiedStatus,-1)
THEN
DB_DefeatedCauses(_Object,"PermaPetrified", 0);

IF
StatusRemoved(_Object, _PetrifiedStatus,_, _)
AND
DB_DefeatedCauses(_Object, "PermaPetrified", 0)
AND
IsStatusFromGroup(_PetrifiedStatus,"SG_Petrified",1)
AND
HasActiveStatusWithGroup(_Object,"SG_Petrified",0)
THEN
NOT DB_DefeatedCauses(_Object, "PermaPetrified", 0);

IF
StatusApplied(_Object, _PetrifiedStatus,_, _)
AND
NOT DB_DefeatedCauses(_Object, "TempPetrified", 0)
AND
IsStatusFromGroup(_PetrifiedStatus,"SG_Petrified",1)
AND
GetStatusTurns(_Object,_PetrifiedStatus,_Turns)
AND
_Turns > -1
THEN
DB_DefeatedCauses(_Object,"TempPetrified", 0);

IF
StatusRemoved(_Object, _PetrifiedStatus,_, _)
AND
DB_DefeatedCauses(_Object, "TempPetrified", 0)
AND
IsStatusFromGroup(_PetrifiedStatus,"SG_Petrified",1)
AND
HasActiveStatusWithGroup(_Object,"SG_Petrified",0)
THEN
NOT DB_DefeatedCauses(_Object, "TempPetrified", 0);

IF
StatusApplied(_Object, _PetrifiedStatus,_, _)
AND
NOT DB_Petrified(_Object)
AND
IsStatusFromGroup(_PetrifiedStatus,"SG_Petrified",1)
THEN
DB_Petrified(_Object);

IF
StatusRemoved(_Object, _PetrifiedStatus,_, _)
AND
DB_Petrified(_Object)
AND
IsStatusFromGroup(_PetrifiedStatus,"SG_Petrified",1)
AND
HasActiveStatusWithGroup(_Object,"SG_Petrified",0)
THEN
NOT DB_Petrified(_Object);

IF
StatusApplied(_Object, "FEIGN_DEATH",_, _)
AND
NOT DB_FeignDeath(_Object)
THEN
DB_FeignDeath(_Object);

IF
StatusRemoved(_Object, "FEIGN_DEATH",_, _)
AND
DB_FeignDeath(_Object)
THEN
NOT DB_FeignDeath(_Object);

IF
StatusApplied(_Object, "PRONE",_, _)
AND
NOT DB_Prone(_Object)
THEN
DB_Prone(_Object);

IF
StatusRemoved(_Object, "PRONE",_, _)
AND
DB_Prone(_Object)
THEN
NOT DB_Prone(_Object);

IF
StatusApplied(_Object, _PolymorphStatus,_, _)
AND
GetStatusType(_PolymorphStatus,"POLYMORPHED")
THEN
DB_Is_Polymorphed(_Object);

IF
StatusRemoved(_Object, _PolymorphStatus,_, _)
AND
DB_Is_Polymorphed(_Object)
AND
GetStatusType(_PolymorphStatus,"POLYMORPHED")
AND
HasAppliedStatusOfType(_Object,"POLYMORPHED",0)
THEN
NOT DB_Is_Polymorphed(_Object);

// Consistent with the polymorph crimes triggered in GLO_Spells
IF
StatusApplied(_NPC,_Status,_Caster,_)
AND
DB_PartyMembers((CHARACTER)_Caster)
AND
IsStatusFromGroup(_Status,"SG_Polymorph",1)
THEN
DB_Is_PolymorphedByPlayer(_NPC);

IF
StatusRemoved(_NPC,_Status,_,_)
AND
DB_Is_PolymorphedByPlayer((CHARACTER)_NPC)
AND
HasAppliedStatusWithGroup(_NPC,"SG_Polymorph",0)
THEN
NOT DB_Is_PolymorphedByPlayer(_NPC);

IF
StatusApplied((CHARACTER)_Character,"BANISHED",_,_)
AND
NOT DB_DefeatedCauses(_Character, "PermaBanished", 0)
AND
GetStatusTurns(_Character,"BANISHED",-1)
THEN
DB_DefeatedCauses(_Character, "PermaBanished", 0);

IF
StatusRemoved((CHARACTER)_Character,"BANISHED",_,_)
AND
DB_DefeatedCauses(_Character, "PermaBanished", 0)
THEN
NOT DB_DefeatedCauses(_Character, "PermaBanished", 0);

IF
StatusApplied((CHARACTER)_Character,"BANISHED",_,_)
AND
NOT DB_DefeatedCauses(_Character, "TempBanished", 0)
AND
GetStatusTurns(_Character,"BANISHED",_Turns)
AND
_Turns > -1
THEN
DB_DefeatedCauses(_Character, "TempBanished", 0);

IF
StatusRemoved((CHARACTER)_Character,"BANISHED",_,_)
AND
DB_DefeatedCauses(_Character, "TempBanished", 0)
THEN
NOT DB_DefeatedCauses(_Character, "TempBanished", 0);

IF
StatusApplied((CHARACTER)_Character,"BANISHED",_,_)
AND
NOT DB_Is_Banished(_Character)
THEN
DB_Is_Banished(_Character);

IF
StatusRemoved((CHARACTER)_Character,"BANISHED",_,_)
AND
DB_Is_Banished(_Character)
THEN
NOT DB_Is_Banished(_Character);

// New tag expression defined ->
// 1. Clear
IF
DB_Shapeshifting_Inconspicuous_TagExpr(_PartyMember, _Expr)
THEN
NOT DB_Is_InconspicuousPartyMember(_PartyMember);

// 2. Recheck
IF
DB_PartyMembers((CHARACTER)_PartyMember)
AND
DB_Shapeshifting_Inconspicuous_TagExpr(_PartyMember, _Expr)
AND
SatisfiesTagExpression(_PartyMember, _Expr, 1)
THEN
DB_Is_InconspicuousPartyMember(_PartyMember);

IF
ShapeshiftChanged(_PartyMember, _, _, _)
AND
DB_PartyMembers((CHARACTER)_PartyMember)
AND
NOT DB_Is_InconspicuousPartyMember(_PartyMember)
AND
DB_Shapeshifting_Inconspicuous_TagExpr(_PartyMember, _Expr)
AND
SatisfiesTagExpression(_PartyMember, _Expr, 1)
THEN
DB_Is_InconspicuousPartyMember(_PartyMember);

IF
ShapeshiftChanged(_PartyMember, _, _, _)
AND
DB_PartyMembers((CHARACTER)_PartyMember)
AND
DB_Is_InconspicuousPartyMember(_PartyMember)
AND
DB_Shapeshifting_Inconspicuous_TagExpr(_PartyMember, _Expr)
AND
SatisfiesTagExpression(_PartyMember, _Expr, 0)
THEN
NOT DB_Is_InconspicuousPartyMember(_PartyMember);

IF
DB_Is_InconspicuousPartyMember(_PartyMember)
AND
NOT DB_PartyMembers(_PartyMember)
THEN
NOT DB_Is_InconspicuousPartyMember(_PartyMember);

IF
StatusAttempt(_Character,_Status,_Causee,_)
AND
IsStatusFromGroup(_Status,"SG_DropForNonMutingDialog",1)
THEN
DB_AttemptingMutingStatuses((GUIDSTRING)_Character,_Status,_Causee);

IF
StatusApplied(_Character,_Status,_Causee,_)
AND
DB_AttemptingMutingStatuses(_Character,_Status,_Causee)
THEN
DB_CurrentMutingStatuses((GUIDSTRING)_Character,_Status,_Causee);
NOT DB_AttemptingMutingStatuses((GUIDSTRING)_Character,_Status,_Causee);
SetTag(_Character, (TAG)MUTED_150ee63f-4d47-4951-b944-a853d8beb9a8);

IF
StatusAttemptFailed(_Character,_Status,_Causee,_)
AND
DB_AttemptingMutingStatuses((GUIDSTRING)_Character,_Status,_Causee)
THEN
NOT DB_AttemptingMutingStatuses((GUIDSTRING)_Character,_Status,_Causee);

// Handles edge case where we need to know whether the status has been attempted or is active before
// the StatusAttempt/StatusAttemptFailed event has arrived
QRY
QRY_HasMutingStatusAndCache((GUIDSTRING)_Target)
AND
DB_CurrentMutingStatuses(_Target,_,_)
THEN
DB_NOOP(1);

QRY
QRY_HasMutingStatusAndCache((GUIDSTRING)_Target)
AND
DB_AttemptingMutingStatuses(_Target,_,_)
THEN
DB_NOOP(1);

QRY
QRY_HasMutingStatusAndCache((GUIDSTRING)_Target)
AND
NOT DB_AttemptingMutingStatuses(_Target,_,_)
AND
NOT DB_CurrentMutingStatuses(_Target,_,_)
AND
_Target != NULL_00000000-0000-0000-0000-000000000000
AND
HasAppliedStatusWithGroup(_Target,"SG_DropForNonMutingDialog",1)
THEN
DB_AttemptingMutingStatuses(_Target,"SG_DropForNonMutingDialog_Dummy",NULL_00000000-0000-0000-0000-000000000000);

IF
StatusAttempt(_Character,_Status,_Causee,_)
AND
DB_AttemptingMutingStatuses(_Character,_Status,_Causee)
AND
DB_AttemptingMutingStatuses(_Character,"SG_DropForNonMutingDialog_Dummy",NULL_00000000-0000-0000-0000-000000000000)
THEN
NOT DB_AttemptingMutingStatuses(_Character,"SG_DropForNonMutingDialog_Dummy",NULL_00000000-0000-0000-0000-000000000000);

IF
StatusAttemptFailed(_Target,_Status,_Causee,_)
AND
DB_AttemptingMutingStatuses(_Target,"SG_DropForNonMutingDialog_Dummy",NULL_00000000-0000-0000-0000-000000000000)
AND
HasAppliedStatusWithGroup(_Target,"SG_DropForNonMutingDialog",0)
THEN
NOT DB_AttemptingMutingStatuses(_Target,"SG_DropForNonMutingDialog_Dummy",NULL_00000000-0000-0000-0000-000000000000);

IF
StatusRemoved(_Character,_Status,_,_)
AND
DB_CurrentMutingStatuses((CHARACTER)_Character,_Status,_Causee)
AND
HasActiveStatus(_Character,_Status,0)
THEN
NOT DB_CurrentMutingStatuses((GUIDSTRING)_Character,_Status,_Causee);
PROC_TryClearMuted((CHARACTER)_Character);

PROC
PROC_TryClearMuted((CHARACTER)_Char)
AND
NOT DB_CurrentMutingStatuses((CHARACTER)_Char,_,_)
THEN
ClearTag(_Char, (TAG)MUTED_150ee63f-4d47-4951-b944-a853d8beb9a8);

//Other Low Level Characer States:
//DB_Is_InCombat -> Set in __Combat
//DB_Is_HandlingDisturbance -> Set in _CRIME_CrimeTriggers
//END_REGION

//REGION High Level Object States - CantTalk


//REGION DB_CantTalk_IgnoreDialogsCombatStatusesDead
IF
DB_Destroyed((ITEM)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);

IF
DB_Petrified((GUIDSTRING)_Object)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Object)
THEN
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Object);
PROC_StateSet_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Object);

IF
DB_FeignDeath((GUIDSTRING)_Object)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Object)
THEN
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Object);
PROC_StateSet_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Object);

IF
DB_IronFlasked((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);

IF
DB_Downed((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);

IF
DB_CRIME_FledOutOfSight(_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
AND
NOT DB_Petrified((GUIDSTRING)_Speaker)
AND
NOT DB_Destroyed((ITEM)_Speaker)
AND
NOT DB_FeignDeath((GUIDSTRING)_Speaker)
AND
NOT DB_IronFlasked((CHARACTER)_Speaker)
AND
NOT DB_Downed((CHARACTER)_Speaker)
AND
NOT DB_CRIME_FledOutOfSight((CHARACTER)_Speaker)
THEN
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker);
//END_REGION

//REGION DB_CantTalk_IgnoreDialogsCombatDead

IF
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);

IF
DB_Is_EngineBlock_Talk((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);

IF
DB_Is_WildShaped((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);

IF
DB_KnockedOut((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
AND
NOT DB_Is_EngineBlock_Talk((CHARACTER)_Speaker)
AND
NOT DB_Is_WildShaped((CHARACTER)_Speaker)
AND
NOT DB_KnockedOut((CHARACTER)_Speaker)
THEN
NOT DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker);

//END_REGION

//REGION DB_CantTalk_IgnoreDialogsCombat

IF
DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker);

IF
DB_Dead((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_Dead((CHARACTER)_Speaker)
THEN
NOT DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker);
//END_REGION

//REGION DB_CantTalk_IgnoreStatusesCombatDead
IF
DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker);

// In interactive dialog and not softlocked -> Can't talk for dialog reasons
IF
DB_InteractiveDialogSpeaker(_,(GUIDSTRING)_Speaker)
AND
NOT DB_ObjectIsDialogSoftLocked(_, _Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker);

// No longer in interactive dialog and not blocked for other reasons
// -> can talk again
IF
DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_InteractiveDialogSpeaker(_,(GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
THEN
NOT DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker);
//END_REGION

//REGION DB_CantTalk_IgnoreStatusesCombat

IF
DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker);

IF
DB_Dead((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_Dead((CHARACTER)_Speaker)
THEN
NOT DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker);
//END_REGION

//REGION DB_CantTalk_IgnoreDialogs
//Anyone unable to speak for reasons other than combat or dialog,
//    or is unable to speak due to combat
//    is unable to speak for reasons other than dialog.

IF
DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker);

IF
DB_Is_InCombat((GUIDSTRING)_Speaker, _)
AND
NOT DB_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
AND
NOT DB_Is_InCombat((GUIDSTRING)_Speaker, _)
THEN
NOT DB_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker);


//END_REGION

//REGION DB_CantTalk_IgnoreCombat

//Anyone unable to speak for reasons other than combat or shapeshift,
//    or unable to speak for reasons other than combat or dialog,
//    is unable to speak for reasons other than combat.

IF
DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
THEN
NOT DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker);

//END_REGION

//REGION DB_CantTalk_IgnoreCombatDead
//Anyone unable to speak for reasons other than combat or shapeshift or dead,
//    or unable to speak for reasons other than combat or dialog or dead ,
//    is unable to speak for reasons other than combat or dead

IF
DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreCombatDead(_Speaker);
PROC_StateSet_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreCombatDead(_Speaker);
PROC_StateSet_CantTalk_IgnoreDead((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreCombatDead(_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
THEN
NOT DB_CantTalk_IgnoreCombatDead(_Speaker);
PROC_StateCleared_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker);
//END_REGION

//REGION DB_CantTalk_IgnoreDead
IF
DB_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDead(_Speaker);
PROC_StateSet_CantTalk_IgnoreDead((GUIDSTRING)_Speaker);

// While dead characters can't be in combat, this DB can also be checked for living characters
IF
DB_Is_InCombat((GUIDSTRING)_Speaker, _)
AND
NOT DB_CantTalk_IgnoreDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreDead(_Speaker);
PROC_StateSet_CantTalk_IgnoreDead((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDead(_Speaker)
AND
NOT DB_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_Is_InCombat((GUIDSTRING)_Speaker, _)
THEN
NOT DB_CantTalk_IgnoreDead(_Speaker);
PROC_StateCleared_CantTalk_IgnoreDead((GUIDSTRING)_Speaker);
//END_REGION

//REGION DB_CantTalk_IgnoreStatusesDead

IF
DB_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker);

IF
DB_Is_InCombat((GUIDSTRING)_Speaker, _)
AND
NOT DB_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker)
AND
NOT DB_Is_InCombat((GUIDSTRING)_Speaker, _)
AND
NOT DB_CantTalk_IgnoreStatusesCombatDead((CHARACTER)_Speaker)
THEN
NOT DB_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker);

//END_REGION

//REGION DB_CantTalk_IgnoreStatuses

IF
DB_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker)
THEN
DB_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker);

IF
DB_Dead((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatuses((CHARACTER)_Speaker)
THEN
DB_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker)
AND
NOT DB_Dead((CHARACTER)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatusesDead((CHARACTER)_Speaker)
THEN
NOT DB_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker);

//END_REGION

//REGION DB_CantTalk
IF
DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk((GUIDSTRING)_Speaker)
THEN
DB_CantTalk((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk((GUIDSTRING)_Speaker)
THEN
DB_CantTalk((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk((GUIDSTRING)_Speaker)
THEN
DB_CantTalk((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk((GUIDSTRING)_Speaker);

IF
DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk((GUIDSTRING)_Speaker)
THEN
DB_CantTalk((GUIDSTRING)_Speaker);
PROC_StateSet_CantTalk((GUIDSTRING)_Speaker);

IF
DB_CantTalk((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDead((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
AND
NOT DB_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker)
THEN
NOT DB_CantTalk((GUIDSTRING)_Speaker);
PROC_StateCleared_CantTalk((GUIDSTRING)_Speaker);
//END_REGION

//END_REGION - High Level Object States - CantTalk

//REGION Dummy functions

PROC
PROC_StateCleared_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreDialogsCombatStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreStatusesCombatDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreStatusesCombat((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreDialogsCombatDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreDialogsCombat((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreCombatDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreDialogs((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreCombat((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreStatusesDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreStatuses((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk_IgnoreDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk_IgnoreDead((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantTalk((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantTalk((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

//END_REGION

//REGION High Level Object States - CantMove
IF
DB_Is_EngineBlock_Move((CHARACTER)_Character)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Character)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Character);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Character);

IF
DB_Dead((CHARACTER)_Character)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Character)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Character);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Character);

IF
DB_KnockedOut((CHARACTER)_Character)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Character)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Character);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Character);

IF
DB_Petrified((GUIDSTRING)_Object)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Object)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Object);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Object);

IF
DB_FeignDeath((GUIDSTRING)_Object)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Object)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Object);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Object);

IF
DB_IronFlasked((CHARACTER)_Character)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Character)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Character);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Character);

IF
DB_Downed((CHARACTER)_Character)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Character)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Character);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Character);

IF
DB_OffStage((GUIDSTRING)_Object)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Object)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Object);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Object);

IF
DB_Is_Banished((CHARACTER)_Character)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Character)
THEN
DB_CantMove_IgnoreDialog((GUIDSTRING)_Character);
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Character);

IF
DB_CantMove_IgnoreDialog((GUIDSTRING)_Object)
AND
NOT DB_Is_EngineBlock_Move((CHARACTER)_Object)
AND
NOT DB_Dead((CHARACTER)_Object)
AND
NOT DB_KnockedOut((CHARACTER)_Object)
AND
NOT DB_Petrified((GUIDSTRING)_Object)
AND
NOT DB_FeignDeath((GUIDSTRING)_Object)
AND
NOT DB_IronFlasked((CHARACTER)_Object)
AND
NOT DB_Downed((CHARACTER)_Object)
AND
NOT DB_Is_Banished((CHARACTER)_Object)
AND
NOT DB_OffStage((GUIDSTRING)_Object)
THEN
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Object);
PROC_StateCleared_CantMove_IgnoreDialog((GUIDSTRING)_Object);

IF
DB_CantMove_IgnoreDialog((GUIDSTRING)_Object)
AND
NOT DB_CantMove((GUIDSTRING)_Object)
THEN
DB_CantMove((GUIDSTRING)_Object);
PROC_StateSet_CantMove((GUIDSTRING)_Object);

IF
DB_InteractiveDialogSpeaker(_,(GUIDSTRING)_Object)
AND
NOT DB_CantMove((GUIDSTRING)_Object)
THEN
DB_CantMove((GUIDSTRING)_Object);
PROC_StateSet_CantMove((GUIDSTRING)_Object);

IF
DB_CantMove((GUIDSTRING)_Object)
AND
NOT DB_CantMove_IgnoreDialog((GUIDSTRING)_Object)
AND
NOT DB_InteractiveDialogSpeaker(_,(GUIDSTRING)_Object)
THEN
NOT DB_CantMove((GUIDSTRING)_Object);
PROC_StateCleared_CantMove((GUIDSTRING)_Object);

PROC
PROC_StateSet_CantMove((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantMove((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateSet_CantMove_IgnoreDialog((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantMove_IgnoreDialog((GUIDSTRING)_Speaker)
THEN
DB_NOOP(1);

//Check CantMove_IgnoreOffstage
QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_Is_EngineBlock_Move((CHARACTER)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_Dead((CHARACTER)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_KnockedOut((CHARACTER)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_Petrified((GUIDSTRING)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_FeignDeath((GUIDSTRING)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_IronFlasked((CHARACTER)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_Downed((CHARACTER)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_Is_Banished((CHARACTER)_Object)
THEN
DB_NOOP(1);

QRY
QRY_CantMove_IgnoreOffstage((GUIDSTRING)_Object)
AND
DB_InteractiveDialogSpeaker(_,(GUIDSTRING)_Object)
THEN
DB_NOOP(1);

//END_REGION

//REGION High Level Object States - PermaDefeated
//Check this state by checking DB_PermaDefeated or reacting to PROC_StateSet_PermaDefeated
//REGION Check if character can be resurrected

IF
DB_Origins(_Character)
THEN
DB_GLO_Playable(_Character);

IF
DB_Avatars(_Character)
THEN
DB_GLO_Playable(_Character);

IF
DB_Hirelings_HACK_Classes(_FlagFlag, _Character, _ClassRecruitedFlag)
THEN
DB_GLO_Playable(_Character);

IF
DB_GLO_Playable(_Character)
THEN
SetTag(_Character, (TAG)PLAYABLE_25bf5042-5bf6-4360-8df8-ab107ccb0d37);

IF
DB_GLO_Playable(_Character)
AND
IsTagged(_Character, BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6, 0)
THEN
DB_CanBeResurrected(_Character);

IF
TagSet((CHARACTER)_Character, BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6)
THEN
NOT DB_CanBeResurrected(_Character);

IF
TagCleared((CHARACTER)_Character, BLOCK_RESURRECTION_22a75dbb-1588-407e-b559-5aa4e6d4e6a6)
AND
DB_GLO_Playable(_Character)
THEN
DB_CanBeResurrected(_Character);

//For Story Reloads:
IF
DB_Players(_Character)
AND
IsTagged(_Character, PLAYABLE_25bf5042-5bf6-4360-8df8-ab107ccb0d37, 1)
THEN
DB_GLO_Playable(_Character);

IF
DB_Origins(_Character)
AND
IsTagged(_Character, PLAYABLE_25bf5042-5bf6-4360-8df8-ab107ccb0d37, 1)
THEN
DB_GLO_Playable(_Character);
//END_REGION

IF
DB_Dead((CHARACTER)_Character)
AND
NOT DB_CanBeResurrected(_Character)
AND
NOT DB_PermaDefeated((GUIDSTRING)_Character)
AND
NOT DB_PreventPermaDefeated((GUIDSTRING)_Character)
THEN
DB_PermaDefeated((GUIDSTRING)_Character);
PROC_StateSet_PermaDefeated((GUIDSTRING)_Character);

IF
DB_KnockedOut((CHARACTER)_Character)
AND
NOT DB_PermaDefeated((GUIDSTRING)_Character)
AND
NOT DB_PreventKnockedOutPermaDefeated((CHARACTER)_Character)
AND
NOT DB_PreventPermaDefeated((GUIDSTRING)_Character)
AND
// If they can be resurrected, they can also be helped up again
NOT DB_CanBeResurrected((CHARACTER)_Character)
AND
DB_ForceRemoveKnockedOutCharacterOnLongRest(_Character)
THEN
DB_PermaDefeated((GUIDSTRING)_Character);
PROC_StateSet_PermaDefeated((GUIDSTRING)_Character);


IF
DB_KnockedOut((CHARACTER)_Character)
AND
NOT DB_PermaDefeated((GUIDSTRING)_Character)
AND
NOT DB_PreventKnockedOutPermaDefeated((CHARACTER)_Character)
AND
NOT DB_PreventPermaDefeated((GUIDSTRING)_Character)
AND
// If they can be resurrected, they can also be helped up again
NOT DB_CanBeResurrected((CHARACTER)_Character)
AND
HasAppliedStatus(_Character,"KNOCKED_OUT_TEMPORARILY",0)
THEN
DB_PermaDefeated((GUIDSTRING)_Character);
PROC_StateSet_PermaDefeated((GUIDSTRING)_Character);


IF
DB_Destroyed((ITEM)_Item)
AND
NOT DB_PermaDefeated((GUIDSTRING)_Item)
AND
NOT DB_PreventPermaDefeated((GUIDSTRING)_Item)
THEN
DB_PermaDefeated((GUIDSTRING)_Item);
PROC_StateSet_PermaDefeated((GUIDSTRING)_Item);

// Summons removed via RemoveSummons call don't die, they just leave
IF
LeftLevel(_Summon,_Region)
AND
NOT DB_PermaDefeated(_Summon)
AND
NOT DB_PreventPermaDefeated(_Summon)
AND
DB_CurrentLevel(_Region)
AND
IsSummon(_Summon,1)
THEN
DB_PermaDefeated((GUIDSTRING)_Summon);
PROC_StateSet_PermaDefeated((GUIDSTRING)_Summon);

// Permanently evil characters are considered as perma-defeated
IF
DB_PermanentlyEvil((CHARACTER)_Character)
AND
NOT DB_PermaDefeated((GUIDSTRING)_Character)
AND
NOT DB_PreventPermaDefeated((GUIDSTRING)_Character)
THEN
DB_PermaDefeated((GUIDSTRING)_Character);
PROC_StateSet_PermaDefeated((GUIDSTRING)_Character);

PROC
PROC_Surrender_Fled((CHARACTER)_Object)
AND
NOT DB_Surrender_BlockPermaDefeatedOnFlee(_Object)
AND
NOT DB_PreventPermaDefeated((GUIDSTRING)_Object)
THEN
DB_PermaDefeated((GUIDSTRING)_Object);
PROC_StateSet_PermaDefeated((GUIDSTRING)_Object);

PROC
PROC_StateSet_PermaDefeated((GUIDSTRING)_Object)
THEN
SetTag(_Object, PERMA_DEFEATED_867f3a1e-1e4b-48c2-869e-343415231727);

PROC
PROC_StateSet_PermaDefeated((GUIDSTRING)_Object)
AND
DB_PermaDefeatedFlag(_Object, (FLAG)_Flag)
THEN
SetFlag(_Flag, NULL_00000000-0000-0000-0000-000000000000);
//END_REGION

//REGION High Level Object States - Defeated
//Check this state by checking DB_Defeated or reacting to PROC_StateSet_Defeated & PROC_StateCleared_Defeated

IF
DB_CustomDefeatedState((GUIDSTRING)_Object, _CustomState)
AND
NOT DB_Defeated((GUIDSTRING)_Object)
AND
_Object != NULL_00000000-0000-0000-0000-000000000000
THEN
DB_DefeatedCauses(_Object, _CustomState, 1);
DB_Defeated((GUIDSTRING)_Object);
PROC_StateSet_Defeated((GUIDSTRING)_Object);

IF
DB_DefeatedCauses(_Object, _CustomState, 1)
AND
NOT DB_CustomDefeatedState(_Object, _CustomState)
THEN
NOT DB_DefeatedCauses(_Object, _CustomState, 1);

IF
DB_Dead((CHARACTER)_Character)
AND
NOT DB_Defeated((GUIDSTRING)_Character)
THEN
DB_Defeated((GUIDSTRING)_Character);
PROC_StateSet_Defeated((GUIDSTRING)_Character);

IF
DB_Destroyed((ITEM)_Item)
AND
NOT DB_Defeated((GUIDSTRING)_Item)
THEN
DB_Defeated((GUIDSTRING)_Item);
PROC_StateSet_Defeated((GUIDSTRING)_Item);

IF
DB_Petrified((GUIDSTRING)_Object)
AND
NOT DB_Defeated((GUIDSTRING)_Object)
THEN
DB_Defeated((GUIDSTRING)_Object);
PROC_StateSet_Defeated((GUIDSTRING)_Object);

IF
DB_Surrendered((CHARACTER)_Character)
AND
NOT DB_Defeated((GUIDSTRING)_Character)
THEN
DB_Defeated((GUIDSTRING)_Character);
PROC_StateSet_Defeated((GUIDSTRING)_Character);

IF
DB_PermanentlyEvil((CHARACTER)_Character)
AND
NOT DB_Defeated((GUIDSTRING)_Character)
THEN
DB_Defeated((GUIDSTRING)_Character);
PROC_StateSet_Defeated((GUIDSTRING)_Character);

IF
DB_KnockedOut((CHARACTER)_Character)
AND
NOT DB_Defeated((GUIDSTRING)_Character)
THEN
DB_Defeated((GUIDSTRING)_Character);
PROC_StateSet_Defeated((GUIDSTRING)_Character);

IF
DB_Downed((CHARACTER)_Character)
AND
NOT DB_Defeated((GUIDSTRING)_Character)
THEN
DB_Defeated((GUIDSTRING)_Character);
PROC_StateSet_Defeated((GUIDSTRING)_Character);

IF
DB_IronFlasked((CHARACTER)_Character)
AND
NOT DB_Defeated((GUIDSTRING)_Character)
THEN
DB_Defeated((GUIDSTRING)_Character);
PROC_StateSet_Defeated((GUIDSTRING)_Character);

// Summons removed via RemoveSummons call don't die, they just leave
IF
LeftLevel(_Summon,_Region)
AND
NOT DB_Defeated(_Summon)
AND
DB_CurrentLevel(_Region)
AND
IsSummon(_Summon,1)
THEN
DB_Defeated((GUIDSTRING)_Summon);
PROC_StateSet_Defeated((GUIDSTRING)_Summon);

IF
DB_Is_Banished((CHARACTER)_Character)
AND
NOT DB_Defeated((GUIDSTRING)_Character)
THEN
DB_Defeated((GUIDSTRING)_Character);
PROC_StateSet_Defeated((GUIDSTRING)_Character);

IF
DB_Defeated((GUIDSTRING)_Object)
AND
NOT DB_Dead((CHARACTER)_Object)
AND
NOT DB_Surrendered((CHARACTER)_Object)
AND
NOT DB_PermanentlyEvil((CHARACTER)_Object)
AND
NOT DB_KnockedOut((CHARACTER)_Object)
AND
NOT DB_IronFlasked((CHARACTER)_Object)
AND
NOT DB_Downed((CHARACTER)_Object)
AND
NOT DB_Is_Banished((CHARACTER)_Object)
AND
NOT DB_Petrified((GUIDSTRING)_Object)
AND
NOT DB_Destroyed((ITEM)_Object)
AND
NOT DB_CustomDefeatedState(_Object, _)
THEN
NOT DB_Defeated((GUIDSTRING)_Object);
PROC_StateCleared_Defeated((GUIDSTRING)_Object);

PROC
PROC_StateSet_Defeated((GUIDSTRING)_Object)
AND
_Object != NULL_00000000-0000-0000-0000-000000000000
THEN
SetTag(_Object, DEFEATED_f0020818-86f1-4ee9-a5a9-9ace9ecc9010);

PROC
PROC_StateCleared_Defeated((GUIDSTRING)_Object)
AND
_Object != NULL_00000000-0000-0000-0000-000000000000
THEN
ClearTag(_Object, DEFEATED_f0020818-86f1-4ee9-a5a9-9ace9ecc9010);

PROC
PROC_StateSet_Defeated((GUIDSTRING)_Object)
AND
DB_DefeatedOnceFlag(_Object, (FLAG)_Flag)
THEN
SetFlag(_Flag, NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_StateSet_Defeated((GUIDSTRING)_Object)
AND
DB_DefeatedStateFlag(_Object, (FLAG)_Flag)
THEN
SetFlag(_Flag, NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_StateCleared_Defeated((GUIDSTRING)_Object)
AND
DB_DefeatedStateFlag(_Object, (FLAG)_Flag)
THEN
ClearFlag(_Flag, NULL_00000000-0000-0000-0000-000000000000);

//END_REGION

//REGION High Level Object States - CantAct
IF
DB_Dead((CHARACTER)_Character)
AND 
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_Is_EngineBlock_Act((CHARACTER)_Character)
AND 
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_Surrendered((CHARACTER)_Character)
AND 
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_KnockedOut((CHARACTER)_Character)
AND 
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_IronFlasked((CHARACTER)_Character)
AND 
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_Downed((CHARACTER)_Character)
AND 
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_OffStage((GUIDSTRING)_Object)
AND 
NOT DB_CantAct((GUIDSTRING)_Object)
THEN
DB_CantAct((GUIDSTRING)_Object);
PROC_StateSet_CantAct((GUIDSTRING)_Object);

IF
DB_InteractiveDialogSpeaker(_,(GUIDSTRING)_Object)
AND 
NOT DB_CantAct((GUIDSTRING)_Object)
THEN
DB_CantAct((GUIDSTRING)_Object);
PROC_StateSet_CantAct((GUIDSTRING)_Object);

IF
DB_Is_InCombat((GUIDSTRING)_Object, _)
AND 
NOT DB_CantAct((GUIDSTRING)_Object)
THEN
DB_CantAct((GUIDSTRING)_Object);
PROC_StateSet_CantAct((GUIDSTRING)_Object);

IF
DB_Dominated((CHARACTER)_Character)
AND 
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_Is_Banished((CHARACTER)_Character)
AND
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_Petrified((GUIDSTRING)_Character)
AND
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_FeignDeath((GUIDSTRING)_Character)
AND
NOT DB_CantAct((GUIDSTRING)_Character)
THEN
DB_CantAct((GUIDSTRING)_Character);
PROC_StateSet_CantAct((GUIDSTRING)_Character);

IF
DB_CantAct((GUIDSTRING)_Object)
AND
NOT DB_Dead((CHARACTER)_Object)
AND
NOT DB_Is_EngineBlock_Act((CHARACTER)_Object)
AND
NOT DB_Surrendered((CHARACTER)_Object)
AND
NOT DB_KnockedOut((CHARACTER)_Object)
AND
NOT DB_IronFlasked((CHARACTER)_Object)
AND
NOT DB_Downed((CHARACTER)_Object)
AND
NOT DB_Dominated((CHARACTER)_Object)
AND
NOT DB_Is_Banished((CHARACTER)_Object)
AND
NOT DB_OffStage((GUIDSTRING)_Object)
AND
NOT DB_Is_InCombat((GUIDSTRING)_Object, _)
AND
NOT DB_InteractiveDialogSpeaker(_,(GUIDSTRING)_Object)
AND
NOT DB_Petrified((GUIDSTRING)_Object)
AND
NOT DB_FeignDeath((GUIDSTRING)_Object)
THEN
NOT DB_CantAct((GUIDSTRING)_Object);
PROC_StateCleared_CantAct((GUIDSTRING)_Object);

PROC
PROC_StateSet_CantAct((GUIDSTRING)_Object)
THEN
DB_NOOP(1);

PROC
PROC_StateCleared_CantAct((GUIDSTRING)_Object)
THEN
DB_NOOP(1);

//END_REGION

//REGION PermaDefeated or Offstage tag (for e.g. FactionIsTagged queries)
IF
DB_Offstage(_Object)
AND
IsItem(_Object, 0)
THEN
DB_PermaDefeatedOrOffstage(_Object);

IF
DB_PermaDefeated(_Object)
AND
IsItem(_Object, 0)
THEN
DB_PermaDefeatedOrOffstage(_Object);

IF
DB_PermaDefeatedOrOffstage(_Object)
THEN
SetTag(_Object,(TAG)PERMA_DEFEATED_OR_OFFSTAGE_b9e63705-637a-4d3b-87ef-a49324cf703f);

IF
DB_PermaDefeatedOrOffstage(_Object)
AND
NOT DB_Offstage(_Object)
AND
NOT DB_PermaDefeated(_Object)
THEN
ClearTag(_Object,(TAG)PERMA_DEFEATED_OR_OFFSTAGE_b9e63705-637a-4d3b-87ef-a49324cf703f);
NOT DB_PermaDefeatedOrOffstage(_Object);
//END_REGION

//REGION Region buffering

IF
LevelLoaded((STRING)_NewRegion) 
THEN
DB_CurrentLevel(_NewRegion);

IF
LevelUnloading((STRING)_Region)
THEN
NOT DB_CurrentLevel(_Region);
NOT DB_ActiveLevel(_Region);

IF
LevelGameplayStarted(_Level,_)
THEN
DB_ActiveLevel(_Level);

QRY
QRY_AnyRegionActive()
AND
DB_CurrentLevel(_)
THEN
DB_NOOP(1);
//END_REGION

//REGION Keeping track of seen dead NPCs

//party
IF
DB_Dead(_NPC)
AND
DB_SeenDeadNPCPartyFlag((CHARACTER)_NPC,(FLAG)_PartyFlag)
AND
DB_Players(_Player)
AND
DB_Sees(_Player,(CHARACTER)_NPC)
THEN
SetFlag((FLAG)_PartyFlag, _Player); // flagType: Party

//global
IF
DB_Dead(_NPC)
AND
DB_SeenDeadNPCGlobalFlag((CHARACTER)_NPC,(FLAG)_GlobalFlag)
AND
DB_Players(_Player)
AND
DB_Sees(_Player,(CHARACTER)_NPC)
AND
NOT DB_GlobalFlag(_GlobalFlag)
THEN
PROC_GlobalSetFlagAndCache((FLAG)_GlobalFlag);

//END_REGION

//REGION Keeping track of seen perma-defeated NPCs

//party
IF
DB_PermaDefeated(_NPC)
AND
DB_SeenPermaDefeatedNPCPartyFlag((CHARACTER)_NPC,(FLAG)_PartyFlag)
AND
DB_Players(_Player)
AND
DB_Sees(_Player,(CHARACTER)_NPC)
THEN
SetFlag((FLAG)_PartyFlag, _Player); // flagType: Party

//global
IF
DB_PermaDefeated(_NPC)
AND
DB_SeenPermaDefeatedNPCGlobalFlag((CHARACTER)_NPC,(FLAG)_GlobalFlag)
AND
DB_Players(_Player)
AND
DB_Sees(_Player,(CHARACTER)_NPC)
AND
NOT DB_GlobalFlag(_GlobalFlag)
THEN
PROC_GlobalSetFlagAndCache((FLAG)_GlobalFlag);

//END_REGION

//REGION OneshotTriggers

//REGION OneshotPlayerTrigger
IF
DB_OneShotPlayerTrigger(_Trigger)
THEN
PROC_TriggerRegisterForPlayers(_Trigger);

PROC
PROC_RemoveOneShotTrigger((TRIGGER)_Trigger)
AND
DB_OneShotPlayerTrigger(_Trigger)
THEN
PROC_TriggerUnregisterForPlayers(_Trigger);
NOT DB_OneShotPlayerTrigger(_Trigger);

IF
EnteredTrigger(_Player,_Trigger)
AND
DB_OneShotPlayerTrigger(_Trigger)
AND
DB_Players(_Player)
THEN
PROC_RemoveOneShotTrigger(_Trigger);
PROC_OneShotTriggerEntered(_Player,_Trigger);

PROC
PROC_OneShotTriggerEntered((CHARACTER)_Player,(TRIGGER)_Trigger)
THEN
DB_NOOP(1);

//END_REGION

//REGION OneShotPartyTrigger

IF
DB_OneShotPartyTrigger(_Trigger)
THEN
PROC_TriggerRegisterForParty(_Trigger);

PROC
PROC_RemoveOneShotTrigger((TRIGGER)_Trigger)
AND
DB_OneShotPartyTrigger(_Trigger)
THEN
PROC_TriggerUnregisterForParty(_Trigger);
NOT DB_OneShotPartyTrigger(_Trigger);
PROC_TriggerUnregisterForPlayers(_Trigger);
//In case the trigger was both in DB_OneShotParty and DB_OneShotPlayer databases.
//If that is not the case, an already-unregistered trigger will not behave differently.

IF
EnteredTrigger(_Character,_Trigger)
AND
DB_OneShotPartyTrigger(_Trigger)
AND
DB_PartyMembers(_Character)
THEN
PROC_RemoveOneShotTrigger(_Trigger);
PROC_OneShotTriggerEntered(_Character,_Trigger);

PROC
PROC_OneShotTriggerEntered((CHARACTER)_Character,(TRIGGER)_Trigger)
THEN
DB_NOOP(1);

//END_REGION

//Warning as this can lead to unexpected behaviour.
IF
DB_OneShotPartyTrigger(_Trigger)
AND
DB_OneShotPlayerTrigger(_Trigger)
AND
GUIDToString(_Trigger, _TriggerName)
AND
Concatenate("Warning: Trigger ", _TriggerName, _NamedTrigger)
AND
Concatenate(_NamedTrigger, " is both a Oneshot Party and Oneshot Player trigger. Removing Oneshot Player entry.", _Message)
THEN
DebugBreak(_Message);

IF
DB_OneShotPartyTrigger(_Trigger)
AND
DB_OneShotPlayerTrigger(_Trigger)
THEN
NOT DB_OneShotPlayerTrigger(_Trigger); //Don't unregister for players, as they are still party members.

//END_REGION

//REGION Summon & follower tracking
IF
CharacterJoinedParty(_Summon)
AND
IsSummon(_Summon, 1)
THEN
DB_PlayerSummons(_Summon);

IF
CharacterJoinedParty(_Follower)
AND
NOT DB_PlayerSummons(_Follower)
AND
IsPartyFollower(_Follower, 1)
THEN
DB_PartyFollowers(_Follower);

IF
DB_Players(_Player)
THEN
DB_PartyMembers(_Player);

IF
DB_PlayerSummons(_Summon)
THEN
DB_PartyMembers(_Summon);

IF
DB_PartyFollowers(_Follower)
THEN
DB_PartyMembers(_Follower);

IF
DB_TutorialCompanion(_Companion)
THEN
DB_PartyMembers(_Companion);

IF
EnteredLevel(_Summon, _, _)
AND
QRY_IsExistingSummon(_Summon, 1)
THEN
DB_Summons(_Summon);

PROC
PROC_StateSet_PermaDefeated(_Summon)
AND
DB_Summons(_Summon)
THEN
DB_Summons_ClearDB(_Summon);
TimerCancel("ClearSummonCache");
TimerLaunch("ClearSummonCache", 0); // Will finish next frame similar to DebugFrameCounter

IF
TimerFinished("ClearSummonCache")
AND
DB_Summons_ClearDB(_Summon)
THEN
PROC_Summons_ClearDBs_Execute(_Summon);

PROC
PROC_Summons_ClearDBs_Execute((GUIDSTRING)_Summon)
THEN
NOT DB_Dead((CHARACTER)_Summon);

PROC
PROC_Summons_ClearDBs_Execute((GUIDSTRING)_Summon)
THEN
NOT DB_Destroyed((ITEM)_Summon);

PROC
PROC_Summons_ClearDBs_Execute((GUIDSTRING)_Summon)
THEN
NOT DB_Summons(_Summon);
NOT DB_Defeated(_Summon);
NOT DB_PermaDefeated(_Summon);
NOT DB_Summons_ClearDB(_Summon);
//END_REGION

//REGION Start origin
IF
GameOption("randomStartOrigin",_Str)
AND
DB_BooleanStrings(1,_Str)
THEN
DB_RandomizeStartOrigin(1);

IF
GameOption("randomStartOrigin",_Str)
AND
DB_BooleanStrings(0,_Str)
THEN
NOT DB_RandomizeStartOrigin(1);

IF
GameOption("startOrigin",_OriginStr)
AND
DB_PredefinedOriginOptions(_OriginStr,_Origin)
THEN
DB_PredefinedStartOrigin(_Origin);
//END_REGION Start origin

//REGION Start party preset
IF
GameOption("partyPreset", _PartyPreset)
THEN
DB_PredefinePartyPreset(_PartyPreset);

IF
GameModeStarted(_, _, 0)
AND
DB_PredefinePartyPreset(_PartyPreset)
AND
GetHostCharacter(_Player)
THEN
LoadPartyPreset(_PartyPreset, _Player);
NOT DB_PredefinePartyPreset(_PartyPreset);
DB_PredefinePartyPreset_Loaded(_PartyPreset);

//Don't load party preset if Character creation is started
IF
DB_CharacterCreationStarted(1)
AND
DB_PredefinePartyPreset(_PartyPreset)
THEN
NOT DB_PredefinePartyPreset(_PartyPreset);

//END_REGION

//REGION High level Object states - 

IF
EnteredForceTurnBased(_Object)
THEN
DB_Is_InFTB(_Object);

IF
LeftForceTurnBased(_Object)
THEN
NOT DB_Is_InFTB(_Object);


//END_REGION
EXITSECTION

ENDEXITSECTION
