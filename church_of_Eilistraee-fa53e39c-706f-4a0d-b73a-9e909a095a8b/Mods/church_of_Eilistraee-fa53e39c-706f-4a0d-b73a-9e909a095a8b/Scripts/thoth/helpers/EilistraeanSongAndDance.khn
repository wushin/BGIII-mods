function EilistraeanSongAttackCheck()
    return HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Target_Bufotoxin_Frog_Summon') | SpellId('Projectile_ArrowOfSmokepowder')
end

function SwordDancerSongAvaliable(entity)
    local hasbladesong = HasStatus('EILISTRAEAN_BLADE')
    if hasbladesong.Result then 
        return ~hasbladesong
    end
    entity = entity or context.Target
    local classcheck = ConditionResult(entity.GetClassLevel('SwordDancer') >= 1)
    if not classcheck.Result then
        return classcheck.Result
    end
    
    local count = 0
    local armor = GetActiveArmor(entity)
    local clotharmor = ConditionResult(armor.ArmorType == ArmorType.Cloth)
    local noarmor = WearingArmor(context.Source)
    local hasshield = HasShieldEquipped(context.Source)

    local hasarmor = clotharmor | noarmor
    local hasbladesongweapon = IsWeaponOfProficiencyGroup('Daggers|Sickles|Shortswords|Rapiers|Scimitars|Longswords', GetItemInEquipmentSlot(EquipmentSlot.MeleeMainHand))
    local hasnoranged = IsWeaponOfProficiencyGroup('HandCrossbows|HeavyCrossbows|LightCrossbows|Longbows|Shortbows', GetItemInEquipmentSlot(EquipmentSlot.RangedMainHand))

    if ~hasarmor then count = count + 1 end
    if hasnoranged.Result then count = count + 1 end
    if not hasbladesongweapon.Result then count = count + 1 end
    if hasshield.Result then count = count + 1 end
    
    if count >= 2 then
        return ConditionResult(false, {ConditionError("HasMultipleEilistraeanSongIssues")})
    end
    
    if not hasbladesongweapon.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongWeapon")})
    end
    
    if hasnoranged.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongRanged")})
    end
    
    if hasarmor.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongArmor")})
    end  
    
    return ~hasshield
end

function SilverhairKnightSongAvaliable(entity)
    local hasbladesong = HasStatus('EILISTRAEAN_DANCE')
    if hasbladesong.Result then 
        return ~hasbladesong
    end
    entity = entity or context.Target
    local classcheck = ConditionResult(entity.GetClassLevel('SilverhairKnight') >= 1)
    if not classcheck.Result then
        return classcheck.Result
    end
    
    local count = 0
    local armor = GetActiveArmor(entity)
    local clotharmor = ConditionResult(armor.ArmorType == ArmorType.Cloth)
    local noarmor = WearingArmor(context.Source)
    local hasshield = HasShieldEquipped(context.Source)

    local hasarmor = clotharmor | noarmor
    local hasbladesongweapon = Unarmed(entity)

    if ~hasarmor then count = count + 1 end
    if not hasbladesongweapon.Result then count = count + 1 end
    if hasshield.Result then count = count + 1 end
    
    if count >= 2 then
        return ConditionResult(false, {ConditionError("HasMultipleEilistraeanSongIssues")})
    end
    
    if not hasbladesongweapon.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongWeapon")})
    end
    
    if hasarmor.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongArmor")})
    end  
    
    return ~hasshield
end

function DarksongKnightSongAvaliable(entity)
    local hasbladesong = HasStatus('EILISTRAEAN_RHYTHM')
    if hasbladesong.Result then 
        return ~hasbladesong
    end
    entity = entity or context.Target
    local classcheck = ConditionResult(entity.GetClassLevel('DarksongKnight') >= 1)
    if not classcheck.Result then
        return classcheck.Result
    end
    
    local count = 0
    local hasshield = HasShieldEquipped(context.Source)
    local hasarmor = HasHeavyArmor(context.Source) | HasMediumArmor(context.Source)
    local hasbladesongweapon = IsWeaponOfProficiencyGroup('Daggers|Sickles|Shortswords|Rapiers|Scimitars|Longswords|Greatswords', GetItemInEquipmentSlot(EquipmentSlot.MeleeMainHand))
    
    if hasarmor.Result then count = count + 1 end
    if not hasbladesongweapon.Result then count = count + 1 end
    if hasshield.Result then count = count + 1 end
    
    if count >= 2 then
        return ConditionResult(false, {ConditionError("HasMultipleEilistraeanSongIssues")})
    end
    
    if not hasbladesongweapon.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongWeapon")})
    end
    
    if hasarmor.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongArmor")})
    end  
    
    return ~hasshield
end

function ProtectorOfTheSongSongAvaliable(entity)
    local hasbladesong = HasStatus('EILISTRAEAN_SONG')
    if hasbladesong.Result then 
        return ~hasbladesong
    end
    entity = entity or context.Target
    local classcheck = ConditionResult(entity.GetClassLevel('ProtectorOfTheSong') >= 1)
    if not classcheck.Result then
        return classcheck.Result
    end
    
    local count = 0
    local hasshield = HasShieldEquipped(context.Source)
    local hasarmor = HasHeavyArmor(context.Source) | HasMediumArmor(context.Source)
    local hasbladesongweapon = IsWeaponOfProficiencyGroup('Daggers|Sickles|Shortswords|Rapiers|Scimitars|Longswords', GetItemInEquipmentSlot(EquipmentSlot.MeleeMainHand))
    
    if hasarmor.Result then count = count + 1 end
    if not hasbladesongweapon.Result then count = count + 1 end
    if hasshield.Result then count = count + 1 end
    
    if count >= 2 then
        return ConditionResult(false, {ConditionError("HasMultipleEilistraeanSongIssues")})
    end
    
    if not hasbladesongweapon.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongWeapon")})
    end
    
    if hasarmor.Result then
        return ConditionResult(false, {ConditionError("HasNotEilistraeanSongArmor")})
    end  
    
    return ~hasshield
end

function HasEilistraeanSongClimaxBlocked()
    result = HasStatus('EILISTRAEAN_ARMOR_MESSAGE') | HasStatus('EILISTRAEAN_SHIELD_MESSAGE') | HasStatus('EILISTRAEAN_WEAPON_MESSAGE') | HasStatus('EILISTRAEAN_UNARMED_MESSAGE') | HasStatus('EILISTRAEAN_SHIELD')
    return ConditionResult(result.Result, {ConditionError("EilistraeanSongClimaxNotBlocked")}, {ConditionError("EilistraeanSongClimaxBlocked")})
end

function HasEilistraeanMoonDanceClimaxBlocked()
    result = HasStatus('EILISTRAEAN_ARMOR_MESSAGE') | HasStatus('EILISTRAEAN_SHIELD_MESSAGE') | HasStatus('EILISTRAEAN_SHIELD')
    return ConditionResult(result.Result, {ConditionError("EilistraeanSongClimaxNotBlocked")}, {ConditionError("EilistraeanSongClimaxBlocked")})
end